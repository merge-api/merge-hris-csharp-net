/*
 * Merge HRIS API
 *
 * The unified API for building rich integrations with multiple HR Information System platforms.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hello@merge.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Merge.HRISClient.Client.OpenAPIDateConverter;

namespace Merge.HRISClient.Model
{
    /// <summary>
    /// # The ModelOperation Object ### Description The &#x60;ModelOperation&#x60; object is used to represent the operations that are currently supported for a given model.  ### Usage Example View what operations are supported for the &#x60;Candidate&#x60; endpoint.
    /// </summary>
    [DataContract(Name = "ModelOperation")]
    public partial class ModelOperation : IEquatable<ModelOperation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModelOperation" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ModelOperation() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ModelOperation" /> class.
        /// </summary>
        /// <param name="modelName">modelName (required).</param>
        /// <param name="availableOperations">availableOperations (required).</param>
        /// <param name="requiredPostParameters">requiredPostParameters (required).</param>
        /// <param name="supportedFields">supportedFields (required).</param>
        public ModelOperation(string modelName = default(string), List<string> availableOperations = default(List<string>), List<string> requiredPostParameters = default(List<string>), List<string> supportedFields = default(List<string>))
        {
            // to ensure "modelName" is required (not null)
            this.ModelName = modelName ?? throw new ArgumentNullException("modelName is a required property for ModelOperation and cannot be null");
            // to ensure "availableOperations" is required (not null)
            this.AvailableOperations = availableOperations ?? throw new ArgumentNullException("availableOperations is a required property for ModelOperation and cannot be null");
            // to ensure "requiredPostParameters" is required (not null)
            this.RequiredPostParameters = requiredPostParameters ?? throw new ArgumentNullException("requiredPostParameters is a required property for ModelOperation and cannot be null");
            // to ensure "supportedFields" is required (not null)
            this.SupportedFields = supportedFields ?? throw new ArgumentNullException("supportedFields is a required property for ModelOperation and cannot be null");
        }

        /// <summary>
        /// Gets or Sets ModelName
        /// </summary>
        [DataMember(Name = "model_name", IsRequired = true, EmitDefaultValue = false)]
        public string ModelName { get; set; }

        /// <summary>
        /// Gets or Sets AvailableOperations
        /// </summary>
        [DataMember(Name = "available_operations", IsRequired = true, EmitDefaultValue = false)]
        public List<string> AvailableOperations { get; set; }

        /// <summary>
        /// Gets or Sets RequiredPostParameters
        /// </summary>
        [DataMember(Name = "required_post_parameters", IsRequired = true, EmitDefaultValue = false)]
        public List<string> RequiredPostParameters { get; set; }

        /// <summary>
        /// Gets or Sets SupportedFields
        /// </summary>
        [DataMember(Name = "supported_fields", IsRequired = true, EmitDefaultValue = false)]
        public List<string> SupportedFields { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ModelOperation {\n");
            sb.Append("  ModelName: ").Append(ModelName).Append("\n");
            sb.Append("  AvailableOperations: ").Append(AvailableOperations).Append("\n");
            sb.Append("  RequiredPostParameters: ").Append(RequiredPostParameters).Append("\n");
            sb.Append("  SupportedFields: ").Append(SupportedFields).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ModelOperation);
        }

        /// <summary>
        /// Returns true if ModelOperation instances are equal
        /// </summary>
        /// <param name="input">Instance of ModelOperation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ModelOperation input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ModelName == input.ModelName ||
                    (this.ModelName != null &&
                    this.ModelName.Equals(input.ModelName))
                ) && 
                (
                    this.AvailableOperations == input.AvailableOperations ||
                    this.AvailableOperations != null &&
                    input.AvailableOperations != null &&
                    this.AvailableOperations.SequenceEqual(input.AvailableOperations)
                ) && 
                (
                    this.RequiredPostParameters == input.RequiredPostParameters ||
                    this.RequiredPostParameters != null &&
                    input.RequiredPostParameters != null &&
                    this.RequiredPostParameters.SequenceEqual(input.RequiredPostParameters)
                ) && 
                (
                    this.SupportedFields == input.SupportedFields ||
                    this.SupportedFields != null &&
                    input.SupportedFields != null &&
                    this.SupportedFields.SequenceEqual(input.SupportedFields)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ModelName != null)
                    hashCode = hashCode * 59 + this.ModelName.GetHashCode();
                if (this.AvailableOperations != null)
                    hashCode = hashCode * 59 + this.AvailableOperations.GetHashCode();
                if (this.RequiredPostParameters != null)
                    hashCode = hashCode * 59 + this.RequiredPostParameters.GetHashCode();
                if (this.SupportedFields != null)
                    hashCode = hashCode * 59 + this.SupportedFields.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
