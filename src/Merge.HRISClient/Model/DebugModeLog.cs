/*
 * Merge HRIS API
 *
 * The unified API for building rich integrations with multiple HR Information System platforms.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hello@merge.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Merge.HRISClient.Client.OpenAPIDateConverter;

namespace Merge.HRISClient.Model
{
    /// <summary>
    /// DebugModeLog
    /// </summary>
    [DataContract(Name = "DebugModeLog")]
    public partial class DebugModeLog : IEquatable<DebugModeLog>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DebugModeLog" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DebugModeLog() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DebugModeLog" /> class.
        /// </summary>
        /// <param name="logId">logId (required).</param>
        /// <param name="dashboardView">dashboardView (required).</param>
        /// <param name="logSummary">logSummary (required).</param>
        public DebugModeLog(string logId = default(string), string dashboardView = default(string), DebugModelLogSummary logSummary = default(DebugModelLogSummary))
        {
            // to ensure "logId" is required (not null)
            this.LogId = logId ?? throw new ArgumentNullException("logId is a required property for DebugModeLog and cannot be null");
            // to ensure "dashboardView" is required (not null)
            this.DashboardView = dashboardView ?? throw new ArgumentNullException("dashboardView is a required property for DebugModeLog and cannot be null");
            // to ensure "logSummary" is required (not null)
            this.LogSummary = logSummary ?? throw new ArgumentNullException("logSummary is a required property for DebugModeLog and cannot be null");
        }

        /// <summary>
        /// Gets or Sets LogId
        /// </summary>
        [DataMember(Name = "log_id", IsRequired = true, EmitDefaultValue = false)]
        public string LogId { get; set; }

        /// <summary>
        /// Gets or Sets DashboardView
        /// </summary>
        [DataMember(Name = "dashboard_view", IsRequired = true, EmitDefaultValue = false)]
        public string DashboardView { get; set; }

        /// <summary>
        /// Gets or Sets LogSummary
        /// </summary>
        [DataMember(Name = "log_summary", IsRequired = true, EmitDefaultValue = false)]
        public DebugModelLogSummary LogSummary { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DebugModeLog {\n");
            sb.Append("  LogId: ").Append(LogId).Append("\n");
            sb.Append("  DashboardView: ").Append(DashboardView).Append("\n");
            sb.Append("  LogSummary: ").Append(LogSummary).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DebugModeLog);
        }

        /// <summary>
        /// Returns true if DebugModeLog instances are equal
        /// </summary>
        /// <param name="input">Instance of DebugModeLog to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DebugModeLog input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.LogId == input.LogId ||
                    (this.LogId != null &&
                    this.LogId.Equals(input.LogId))
                ) && 
                (
                    this.DashboardView == input.DashboardView ||
                    (this.DashboardView != null &&
                    this.DashboardView.Equals(input.DashboardView))
                ) && 
                (
                    this.LogSummary == input.LogSummary ||
                    (this.LogSummary != null &&
                    this.LogSummary.Equals(input.LogSummary))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LogId != null)
                    hashCode = hashCode * 59 + this.LogId.GetHashCode();
                if (this.DashboardView != null)
                    hashCode = hashCode * 59 + this.DashboardView.GetHashCode();
                if (this.LogSummary != null)
                    hashCode = hashCode * 59 + this.LogSummary.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
