/*
 * Merge HRIS API
 *
 * The unified API for building rich integrations with multiple HR Information System platforms.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hello@merge.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Merge.HRISClient.Client.OpenAPIDateConverter;

namespace Merge.HRISClient.Model
{
    /// <summary>
    /// # The DataPassthrough Object ### Description The &#x60;DataPassthrough&#x60; object is used to send information to an otherwise-unsupported third-party endpoint.  ### Usage Example Create a &#x60;DataPassthrough&#x60; to get team hierarchies from your Rippling integration.
    /// </summary>
    [DataContract(Name = "DataPassthroughRequest")]
    public partial class DataPassthroughRequest : IEquatable<DataPassthroughRequest>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Method
        /// </summary>
        [DataMember(Name = "method", IsRequired = true, EmitDefaultValue = false)]
        public MethodEnum Method { get; set; }

        /// <summary>
        /// Gets or Sets RequestFormat
        /// </summary>
        [DataMember(Name = "request_format", EmitDefaultValue = true)]
        public RequestFormatEnum? RequestFormat { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DataPassthroughRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DataPassthroughRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DataPassthroughRequest" /> class.
        /// </summary>
        /// <param name="method">method (required).</param>
        /// <param name="path">path (required).</param>
        /// <param name="baseUrlOverride">baseUrlOverride.</param>
        /// <param name="data">data.</param>
        /// <param name="multipartFormData">Pass an array of &#x60;MultipartFormField&#x60; objects in here instead of using the &#x60;data&#x60; param if &#x60;request_format&#x60; is set to &#x60;MULTIPART&#x60;..</param>
        /// <param name="headers">The headers to use for the request (Merge will handle the account&#39;s authorization headers). &#x60;Content-Type&#x60; header is required for passthrough. Choose content type corresponding to expected format of receiving server..</param>
        /// <param name="requestFormat">requestFormat.</param>
        /// <param name="normalizeResponse">Optional. If true, the response will always be an object of the form &#x60;{\&quot;type\&quot;: T, \&quot;value\&quot;: ...}&#x60; where &#x60;T&#x60; will be one of &#x60;string, boolean, number, null, array, object&#x60;..</param>
        public DataPassthroughRequest(MethodEnum method = default(MethodEnum), string path = default(string), string baseUrlOverride = default(string), string data = default(string), List<MultipartFormFieldRequest> multipartFormData = default(List<MultipartFormFieldRequest>), Dictionary<string, Object> headers = default(Dictionary<string, Object>), RequestFormatEnum? requestFormat = default(RequestFormatEnum?), bool normalizeResponse = default(bool))
        {
            this.Method = method;
            // to ensure "path" is required (not null)
            this.Path = path ?? throw new ArgumentNullException("path is a required property for DataPassthroughRequest and cannot be null");
            this.BaseUrlOverride = baseUrlOverride;
            this.Data = data;
            this.MultipartFormData = multipartFormData;
            this.Headers = headers;
            this.RequestFormat = requestFormat;
            this.NormalizeResponse = normalizeResponse;
        }

        /// <summary>
        /// Gets or Sets Path
        /// </summary>
        [DataMember(Name = "path", IsRequired = true, EmitDefaultValue = false)]
        public string Path { get; set; }

        /// <summary>
        /// Gets or Sets BaseUrlOverride
        /// </summary>
        [DataMember(Name = "base_url_override", EmitDefaultValue = true)]
        public string BaseUrlOverride { get; set; }

        /// <summary>
        /// Gets or Sets Data
        /// </summary>
        [DataMember(Name = "data", EmitDefaultValue = true)]
        public string Data { get; set; }

        /// <summary>
        /// Pass an array of &#x60;MultipartFormField&#x60; objects in here instead of using the &#x60;data&#x60; param if &#x60;request_format&#x60; is set to &#x60;MULTIPART&#x60;.
        /// </summary>
        /// <value>Pass an array of &#x60;MultipartFormField&#x60; objects in here instead of using the &#x60;data&#x60; param if &#x60;request_format&#x60; is set to &#x60;MULTIPART&#x60;.</value>
        [DataMember(Name = "multipart_form_data", EmitDefaultValue = true)]
        public List<MultipartFormFieldRequest> MultipartFormData { get; set; }

        /// <summary>
        /// The headers to use for the request (Merge will handle the account&#39;s authorization headers). &#x60;Content-Type&#x60; header is required for passthrough. Choose content type corresponding to expected format of receiving server.
        /// </summary>
        /// <value>The headers to use for the request (Merge will handle the account&#39;s authorization headers). &#x60;Content-Type&#x60; header is required for passthrough. Choose content type corresponding to expected format of receiving server.</value>
        [DataMember(Name = "headers", EmitDefaultValue = true)]
        public Dictionary<string, Object> Headers { get; set; }

        /// <summary>
        /// Optional. If true, the response will always be an object of the form &#x60;{\&quot;type\&quot;: T, \&quot;value\&quot;: ...}&#x60; where &#x60;T&#x60; will be one of &#x60;string, boolean, number, null, array, object&#x60;.
        /// </summary>
        /// <value>Optional. If true, the response will always be an object of the form &#x60;{\&quot;type\&quot;: T, \&quot;value\&quot;: ...}&#x60; where &#x60;T&#x60; will be one of &#x60;string, boolean, number, null, array, object&#x60;.</value>
        [DataMember(Name = "normalize_response", EmitDefaultValue = true)]
        public bool NormalizeResponse { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DataPassthroughRequest {\n");
            sb.Append("  Method: ").Append(Method).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  BaseUrlOverride: ").Append(BaseUrlOverride).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  MultipartFormData: ").Append(MultipartFormData).Append("\n");
            sb.Append("  Headers: ").Append(Headers).Append("\n");
            sb.Append("  RequestFormat: ").Append(RequestFormat).Append("\n");
            sb.Append("  NormalizeResponse: ").Append(NormalizeResponse).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DataPassthroughRequest);
        }

        /// <summary>
        /// Returns true if DataPassthroughRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of DataPassthroughRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DataPassthroughRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Method == input.Method ||
                    this.Method.Equals(input.Method)
                ) && 
                (
                    this.Path == input.Path ||
                    (this.Path != null &&
                    this.Path.Equals(input.Path))
                ) && 
                (
                    this.BaseUrlOverride == input.BaseUrlOverride ||
                    (this.BaseUrlOverride != null &&
                    this.BaseUrlOverride.Equals(input.BaseUrlOverride))
                ) && 
                (
                    this.Data == input.Data ||
                    (this.Data != null &&
                    this.Data.Equals(input.Data))
                ) && 
                (
                    this.MultipartFormData == input.MultipartFormData ||
                    this.MultipartFormData != null &&
                    input.MultipartFormData != null &&
                    this.MultipartFormData.SequenceEqual(input.MultipartFormData)
                ) && 
                (
                    this.Headers == input.Headers ||
                    this.Headers != null &&
                    input.Headers != null &&
                    this.Headers.SequenceEqual(input.Headers)
                ) && 
                (
                    this.RequestFormat == input.RequestFormat ||
                    this.RequestFormat.Equals(input.RequestFormat)
                ) && 
                (
                    this.NormalizeResponse == input.NormalizeResponse ||
                    this.NormalizeResponse.Equals(input.NormalizeResponse)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Method.GetHashCode();
                if (this.Path != null)
                    hashCode = hashCode * 59 + this.Path.GetHashCode();
                if (this.BaseUrlOverride != null)
                    hashCode = hashCode * 59 + this.BaseUrlOverride.GetHashCode();
                if (this.Data != null)
                    hashCode = hashCode * 59 + this.Data.GetHashCode();
                if (this.MultipartFormData != null)
                    hashCode = hashCode * 59 + this.MultipartFormData.GetHashCode();
                if (this.Headers != null)
                    hashCode = hashCode * 59 + this.Headers.GetHashCode();
                hashCode = hashCode * 59 + this.RequestFormat.GetHashCode();
                hashCode = hashCode * 59 + this.NormalizeResponse.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Path (string) minLength
            if(this.Path != null && this.Path.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Path, length must be greater than 1.", new [] { "Path" });
            }

            // BaseUrlOverride (string) minLength
            if(this.BaseUrlOverride != null && this.BaseUrlOverride.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BaseUrlOverride, length must be greater than 1.", new [] { "BaseUrlOverride" });
            }

            // Data (string) minLength
            if(this.Data != null && this.Data.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Data, length must be greater than 1.", new [] { "Data" });
            }

            yield break;
        }
    }

}
