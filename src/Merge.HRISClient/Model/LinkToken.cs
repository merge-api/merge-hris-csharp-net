/*
 * Merge HRIS API
 *
 * The unified API for building rich integrations with multiple HR Information System platforms.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hello@merge.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Merge.HRISClient.Client.OpenAPIDateConverter;

namespace Merge.HRISClient.Model
{
    /// <summary>
    /// LinkToken
    /// </summary>
    [DataContract(Name = "LinkToken")]
    public partial class LinkToken : IEquatable<LinkToken>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LinkToken" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected LinkToken() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="LinkToken" /> class.
        /// </summary>
        /// <param name="linkToken">linkToken (required).</param>
        /// <param name="integrationName">integrationName (required).</param>
        /// <param name="magicLinkUrl">magicLinkUrl.</param>
        public LinkToken(string linkToken = default(string), string integrationName = default(string), string magicLinkUrl = default(string))
        {
            // to ensure "linkToken" is required (not null)
            this._LinkToken = linkToken ?? throw new ArgumentNullException("linkToken is a required property for LinkToken and cannot be null");
            // to ensure "integrationName" is required (not null)
            this.IntegrationName = integrationName ?? throw new ArgumentNullException("integrationName is a required property for LinkToken and cannot be null");
            this.MagicLinkUrl = magicLinkUrl;
        }

        /// <summary>
        /// Gets or Sets _LinkToken
        /// </summary>
        [DataMember(Name = "link_token", IsRequired = true, EmitDefaultValue = false)]
        public string _LinkToken { get; set; }

        /// <summary>
        /// Gets or Sets IntegrationName
        /// </summary>
        [DataMember(Name = "integration_name", IsRequired = true, EmitDefaultValue = false)]
        public string IntegrationName { get; set; }

        /// <summary>
        /// Gets or Sets MagicLinkUrl
        /// </summary>
        [DataMember(Name = "magic_link_url", EmitDefaultValue = false)]
        public string MagicLinkUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LinkToken {\n");
            sb.Append("  _LinkToken: ").Append(_LinkToken).Append("\n");
            sb.Append("  IntegrationName: ").Append(IntegrationName).Append("\n");
            sb.Append("  MagicLinkUrl: ").Append(MagicLinkUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LinkToken);
        }

        /// <summary>
        /// Returns true if LinkToken instances are equal
        /// </summary>
        /// <param name="input">Instance of LinkToken to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LinkToken input)
        {
            if (input == null)
                return false;

            return 
                (
                    this._LinkToken == input._LinkToken ||
                    (this._LinkToken != null &&
                    this._LinkToken.Equals(input._LinkToken))
                ) && 
                (
                    this.IntegrationName == input.IntegrationName ||
                    (this.IntegrationName != null &&
                    this.IntegrationName.Equals(input.IntegrationName))
                ) && 
                (
                    this.MagicLinkUrl == input.MagicLinkUrl ||
                    (this.MagicLinkUrl != null &&
                    this.MagicLinkUrl.Equals(input.MagicLinkUrl))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this._LinkToken != null)
                    hashCode = hashCode * 59 + this._LinkToken.GetHashCode();
                if (this.IntegrationName != null)
                    hashCode = hashCode * 59 + this.IntegrationName.GetHashCode();
                if (this.MagicLinkUrl != null)
                    hashCode = hashCode * 59 + this.MagicLinkUrl.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
