/*
 * Merge HRIS API
 *
 * The unified API for building rich integrations with multiple HR Information System platforms.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hello@merge.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Merge.HRISClient.Client.OpenAPIDateConverter;

namespace Merge.HRISClient.Model
{
    /// <summary>
    /// AccountToken
    /// </summary>
    [DataContract(Name = "AccountToken")]
    public partial class AccountToken : IEquatable<AccountToken>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountToken" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AccountToken() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountToken" /> class.
        /// </summary>
        /// <param name="accountToken">accountToken (required).</param>
        /// <param name="integration">integration (required).</param>
        public AccountToken(string accountToken = default(string), AccountIntegration integration = default(AccountIntegration))
        {
            // to ensure "accountToken" is required (not null)
            this._AccountToken = accountToken ?? throw new ArgumentNullException("accountToken is a required property for AccountToken and cannot be null");
            // to ensure "integration" is required (not null)
            this.Integration = integration ?? throw new ArgumentNullException("integration is a required property for AccountToken and cannot be null");
        }

        /// <summary>
        /// Gets or Sets _AccountToken
        /// </summary>
        [DataMember(Name = "account_token", IsRequired = true, EmitDefaultValue = false)]
        public string _AccountToken { get; set; }

        /// <summary>
        /// Gets or Sets Integration
        /// </summary>
        [DataMember(Name = "integration", IsRequired = true, EmitDefaultValue = false)]
        public AccountIntegration Integration { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AccountToken {\n");
            sb.Append("  _AccountToken: ").Append(_AccountToken).Append("\n");
            sb.Append("  Integration: ").Append(Integration).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AccountToken);
        }

        /// <summary>
        /// Returns true if AccountToken instances are equal
        /// </summary>
        /// <param name="input">Instance of AccountToken to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AccountToken input)
        {
            if (input == null)
                return false;

            return 
                (
                    this._AccountToken == input._AccountToken ||
                    (this._AccountToken != null &&
                    this._AccountToken.Equals(input._AccountToken))
                ) && 
                (
                    this.Integration == input.Integration ||
                    (this.Integration != null &&
                    this.Integration.Equals(input.Integration))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this._AccountToken != null)
                    hashCode = hashCode * 59 + this._AccountToken.GetHashCode();
                if (this.Integration != null)
                    hashCode = hashCode * 59 + this.Integration.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
