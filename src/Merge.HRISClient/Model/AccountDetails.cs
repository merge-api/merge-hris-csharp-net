/*
 * Merge HRIS API
 *
 * The unified API for building rich integrations with multiple HR Information System platforms.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hello@merge.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Merge.HRISClient.Client.OpenAPIDateConverter;

namespace Merge.HRISClient.Model
{
    /// <summary>
    /// AccountDetails
    /// </summary>
    [DataContract(Name = "AccountDetails")]
    public partial class AccountDetails : IEquatable<AccountDetails>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Category
        /// </summary>
        [DataMember(Name = "category", EmitDefaultValue = true)]
        public CategoryEnum? Category { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountDetails" /> class.
        /// </summary>
        /// <param name="category">category.</param>
        public AccountDetails(CategoryEnum? category = default(CategoryEnum?))
        {
            this.Category = category;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public Guid Id { get; private set; }

        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return false;
        }

        /// <summary>
        /// Gets or Sets Integration
        /// </summary>
        [DataMember(Name = "integration", EmitDefaultValue = false)]
        public string Integration { get; private set; }

        /// <summary>
        /// Returns false as Integration should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeIntegration()
        {
            return false;
        }

        /// <summary>
        /// Gets or Sets IntegrationSlug
        /// </summary>
        [DataMember(Name = "integration_slug", EmitDefaultValue = false)]
        public string IntegrationSlug { get; private set; }

        /// <summary>
        /// Returns false as IntegrationSlug should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeIntegrationSlug()
        {
            return false;
        }

        /// <summary>
        /// Gets or Sets EndUserOriginId
        /// </summary>
        [DataMember(Name = "end_user_origin_id", EmitDefaultValue = false)]
        public string EndUserOriginId { get; private set; }

        /// <summary>
        /// Returns false as EndUserOriginId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeEndUserOriginId()
        {
            return false;
        }

        /// <summary>
        /// Gets or Sets EndUserOrganizationName
        /// </summary>
        [DataMember(Name = "end_user_organization_name", EmitDefaultValue = false)]
        public string EndUserOrganizationName { get; private set; }

        /// <summary>
        /// Returns false as EndUserOrganizationName should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeEndUserOrganizationName()
        {
            return false;
        }

        /// <summary>
        /// Gets or Sets EndUserEmailAddress
        /// </summary>
        [DataMember(Name = "end_user_email_address", EmitDefaultValue = false)]
        public string EndUserEmailAddress { get; private set; }

        /// <summary>
        /// Returns false as EndUserEmailAddress should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeEndUserEmailAddress()
        {
            return false;
        }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public string Status { get; private set; }

        /// <summary>
        /// Returns false as Status should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeStatus()
        {
            return false;
        }

        /// <summary>
        /// Gets or Sets WebhookListenerUrl
        /// </summary>
        [DataMember(Name = "webhook_listener_url", EmitDefaultValue = false)]
        public string WebhookListenerUrl { get; private set; }

        /// <summary>
        /// Returns false as WebhookListenerUrl should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeWebhookListenerUrl()
        {
            return false;
        }

        /// <summary>
        /// Whether a Production Linked Account&#39;s credentials match another existing Production Linked Account. This field is &#x60;null&#x60; for Test Linked Accounts, incomplete Production Linked Accounts, and ignored duplicate Production Linked Account sets.
        /// </summary>
        /// <value>Whether a Production Linked Account&#39;s credentials match another existing Production Linked Account. This field is &#x60;null&#x60; for Test Linked Accounts, incomplete Production Linked Accounts, and ignored duplicate Production Linked Account sets.</value>
        [DataMember(Name = "is_duplicate", EmitDefaultValue = true)]
        public bool? IsDuplicate { get; private set; }

        /// <summary>
        /// Returns false as IsDuplicate should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeIsDuplicate()
        {
            return false;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AccountDetails {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Integration: ").Append(Integration).Append("\n");
            sb.Append("  IntegrationSlug: ").Append(IntegrationSlug).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  EndUserOriginId: ").Append(EndUserOriginId).Append("\n");
            sb.Append("  EndUserOrganizationName: ").Append(EndUserOrganizationName).Append("\n");
            sb.Append("  EndUserEmailAddress: ").Append(EndUserEmailAddress).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  WebhookListenerUrl: ").Append(WebhookListenerUrl).Append("\n");
            sb.Append("  IsDuplicate: ").Append(IsDuplicate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AccountDetails);
        }

        /// <summary>
        /// Returns true if AccountDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of AccountDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AccountDetails input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Integration == input.Integration ||
                    (this.Integration != null &&
                    this.Integration.Equals(input.Integration))
                ) && 
                (
                    this.IntegrationSlug == input.IntegrationSlug ||
                    (this.IntegrationSlug != null &&
                    this.IntegrationSlug.Equals(input.IntegrationSlug))
                ) && 
                (
                    this.Category == input.Category ||
                    this.Category.Equals(input.Category)
                ) && 
                (
                    this.EndUserOriginId == input.EndUserOriginId ||
                    (this.EndUserOriginId != null &&
                    this.EndUserOriginId.Equals(input.EndUserOriginId))
                ) && 
                (
                    this.EndUserOrganizationName == input.EndUserOrganizationName ||
                    (this.EndUserOrganizationName != null &&
                    this.EndUserOrganizationName.Equals(input.EndUserOrganizationName))
                ) && 
                (
                    this.EndUserEmailAddress == input.EndUserEmailAddress ||
                    (this.EndUserEmailAddress != null &&
                    this.EndUserEmailAddress.Equals(input.EndUserEmailAddress))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.WebhookListenerUrl == input.WebhookListenerUrl ||
                    (this.WebhookListenerUrl != null &&
                    this.WebhookListenerUrl.Equals(input.WebhookListenerUrl))
                ) && 
                (
                    this.IsDuplicate == input.IsDuplicate ||
                    (this.IsDuplicate != null &&
                    this.IsDuplicate.Equals(input.IsDuplicate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Integration != null)
                    hashCode = hashCode * 59 + this.Integration.GetHashCode();
                if (this.IntegrationSlug != null)
                    hashCode = hashCode * 59 + this.IntegrationSlug.GetHashCode();
                hashCode = hashCode * 59 + this.Category.GetHashCode();
                if (this.EndUserOriginId != null)
                    hashCode = hashCode * 59 + this.EndUserOriginId.GetHashCode();
                if (this.EndUserOrganizationName != null)
                    hashCode = hashCode * 59 + this.EndUserOrganizationName.GetHashCode();
                if (this.EndUserEmailAddress != null)
                    hashCode = hashCode * 59 + this.EndUserEmailAddress.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.WebhookListenerUrl != null)
                    hashCode = hashCode * 59 + this.WebhookListenerUrl.GetHashCode();
                if (this.IsDuplicate != null)
                    hashCode = hashCode * 59 + this.IsDuplicate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
