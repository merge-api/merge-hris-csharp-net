/*
 * Merge HRIS API
 *
 * The unified API for building rich integrations with multiple HR Information System platforms.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hello@merge.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Merge.HRISClient.Client.OpenAPIDateConverter;

namespace Merge.HRISClient.Model
{
    /// <summary>
    /// AccountDetailsAndActionsIntegration
    /// </summary>
    [DataContract(Name = "AccountDetailsAndActionsIntegration")]
    public partial class AccountDetailsAndActionsIntegration : IEquatable<AccountDetailsAndActionsIntegration>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountDetailsAndActionsIntegration" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AccountDetailsAndActionsIntegration() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountDetailsAndActionsIntegration" /> class.
        /// </summary>
        /// <param name="name">name (required).</param>
        /// <param name="categories">categories (required).</param>
        /// <param name="image">image.</param>
        /// <param name="squareImage">squareImage.</param>
        /// <param name="color">color (required).</param>
        /// <param name="slug">slug (required).</param>
        /// <param name="passthroughAvailable">passthroughAvailable (required).</param>
        /// <param name="availableModelOperations">availableModelOperations.</param>
        public AccountDetailsAndActionsIntegration(string name = default(string), List<string> categories = default(List<string>), string image = default(string), string squareImage = default(string), string color = default(string), string slug = default(string), bool passthroughAvailable = default(bool), List<ModelOperation> availableModelOperations = default(List<ModelOperation>))
        {
            // to ensure "name" is required (not null)
            this.Name = name ?? throw new ArgumentNullException("name is a required property for AccountDetailsAndActionsIntegration and cannot be null");
            // to ensure "categories" is required (not null)
            this.Categories = categories ?? throw new ArgumentNullException("categories is a required property for AccountDetailsAndActionsIntegration and cannot be null");
            // to ensure "color" is required (not null)
            this.Color = color ?? throw new ArgumentNullException("color is a required property for AccountDetailsAndActionsIntegration and cannot be null");
            // to ensure "slug" is required (not null)
            this.Slug = slug ?? throw new ArgumentNullException("slug is a required property for AccountDetailsAndActionsIntegration and cannot be null");
            this.PassthroughAvailable = passthroughAvailable;
            this.Image = image;
            this.SquareImage = squareImage;
            this.AvailableModelOperations = availableModelOperations;
        }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Categories
        /// </summary>
        [DataMember(Name = "categories", IsRequired = true, EmitDefaultValue = false)]
        public List<string> Categories { get; set; }

        /// <summary>
        /// Gets or Sets Image
        /// </summary>
        [DataMember(Name = "image", EmitDefaultValue = false)]
        public string Image { get; set; }

        /// <summary>
        /// Gets or Sets SquareImage
        /// </summary>
        [DataMember(Name = "square_image", EmitDefaultValue = false)]
        public string SquareImage { get; set; }

        /// <summary>
        /// Gets or Sets Color
        /// </summary>
        [DataMember(Name = "color", IsRequired = true, EmitDefaultValue = false)]
        public string Color { get; set; }

        /// <summary>
        /// Gets or Sets Slug
        /// </summary>
        [DataMember(Name = "slug", IsRequired = true, EmitDefaultValue = false)]
        public string Slug { get; set; }

        /// <summary>
        /// Gets or Sets PassthroughAvailable
        /// </summary>
        [DataMember(Name = "passthrough_available", IsRequired = true, EmitDefaultValue = true)]
        public bool PassthroughAvailable { get; set; }

        /// <summary>
        /// Gets or Sets AvailableModelOperations
        /// </summary>
        [DataMember(Name = "available_model_operations", EmitDefaultValue = false)]
        public List<ModelOperation> AvailableModelOperations { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AccountDetailsAndActionsIntegration {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Categories: ").Append(Categories).Append("\n");
            sb.Append("  Image: ").Append(Image).Append("\n");
            sb.Append("  SquareImage: ").Append(SquareImage).Append("\n");
            sb.Append("  Color: ").Append(Color).Append("\n");
            sb.Append("  Slug: ").Append(Slug).Append("\n");
            sb.Append("  PassthroughAvailable: ").Append(PassthroughAvailable).Append("\n");
            sb.Append("  AvailableModelOperations: ").Append(AvailableModelOperations).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AccountDetailsAndActionsIntegration);
        }

        /// <summary>
        /// Returns true if AccountDetailsAndActionsIntegration instances are equal
        /// </summary>
        /// <param name="input">Instance of AccountDetailsAndActionsIntegration to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AccountDetailsAndActionsIntegration input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Categories == input.Categories ||
                    this.Categories != null &&
                    input.Categories != null &&
                    this.Categories.SequenceEqual(input.Categories)
                ) && 
                (
                    this.Image == input.Image ||
                    (this.Image != null &&
                    this.Image.Equals(input.Image))
                ) && 
                (
                    this.SquareImage == input.SquareImage ||
                    (this.SquareImage != null &&
                    this.SquareImage.Equals(input.SquareImage))
                ) && 
                (
                    this.Color == input.Color ||
                    (this.Color != null &&
                    this.Color.Equals(input.Color))
                ) && 
                (
                    this.Slug == input.Slug ||
                    (this.Slug != null &&
                    this.Slug.Equals(input.Slug))
                ) && 
                (
                    this.PassthroughAvailable == input.PassthroughAvailable ||
                    this.PassthroughAvailable.Equals(input.PassthroughAvailable)
                ) && 
                (
                    this.AvailableModelOperations == input.AvailableModelOperations ||
                    this.AvailableModelOperations != null &&
                    input.AvailableModelOperations != null &&
                    this.AvailableModelOperations.SequenceEqual(input.AvailableModelOperations)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Categories != null)
                    hashCode = hashCode * 59 + this.Categories.GetHashCode();
                if (this.Image != null)
                    hashCode = hashCode * 59 + this.Image.GetHashCode();
                if (this.SquareImage != null)
                    hashCode = hashCode * 59 + this.SquareImage.GetHashCode();
                if (this.Color != null)
                    hashCode = hashCode * 59 + this.Color.GetHashCode();
                if (this.Slug != null)
                    hashCode = hashCode * 59 + this.Slug.GetHashCode();
                hashCode = hashCode * 59 + this.PassthroughAvailable.GetHashCode();
                if (this.AvailableModelOperations != null)
                    hashCode = hashCode * 59 + this.AvailableModelOperations.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
