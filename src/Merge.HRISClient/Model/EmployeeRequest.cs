/*
 * Merge HRIS API
 *
 * The unified API for building rich integrations with multiple HR Information System platforms.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hello@merge.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Merge.HRISClient.Client.OpenAPIDateConverter;

namespace Merge.HRISClient.Model
{
    /// <summary>
    /// # The Employee Object ### Description The &#x60;Employee&#x60; object is used to represent an Employee for a company.  ### Usage Example Fetch from the &#x60;LIST Employee&#x60; endpoint and filter by &#x60;ID&#x60; to show all employees.
    /// </summary>
    [DataContract(Name = "EmployeeRequest")]
    public partial class EmployeeRequest : IEquatable<EmployeeRequest>, IValidatableObject
    {

        /// <summary>
        /// The employee&#39;s gender.
        /// </summary>
        /// <value>The employee&#39;s gender.</value>
        [DataMember(Name = "gender", EmitDefaultValue = true)]
        public GenderEnum? Gender { get; set; }

        /// <summary>
        /// The employee&#39;s ethnicity.
        /// </summary>
        /// <value>The employee&#39;s ethnicity.</value>
        [DataMember(Name = "ethnicity", EmitDefaultValue = true)]
        public EthnicityEnum? Ethnicity { get; set; }

        /// <summary>
        /// The employee&#39;s marital status.
        /// </summary>
        /// <value>The employee&#39;s marital status.</value>
        [DataMember(Name = "marital_status", EmitDefaultValue = true)]
        public MaritalStatusEnum? MaritalStatus { get; set; }

        /// <summary>
        /// The employment status of the employee.
        /// </summary>
        /// <value>The employment status of the employee.</value>
        [DataMember(Name = "employment_status", EmitDefaultValue = true)]
        public EmploymentStatusEnum? EmploymentStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="EmployeeRequest" /> class.
        /// </summary>
        /// <param name="remoteId">The third-party API ID of the matching object..</param>
        /// <param name="employeeNumber">The employee&#39;s number that appears in the remote UI. Note: This is distinct from the remote_id field, which is a unique identifier for the employee set by the remote API, and is not exposed to the user..</param>
        /// <param name="company">company.</param>
        /// <param name="firstName">The employee&#39;s first name..</param>
        /// <param name="lastName">The employee&#39;s last name..</param>
        /// <param name="displayFullName">The employee&#39;s full name, to use for display purposes. If a preferred first name is available, the full name will include the preferred first name..</param>
        /// <param name="groups">groups.</param>
        /// <param name="workEmail">The employee&#39;s work email..</param>
        /// <param name="personalEmail">The employee&#39;s personal email..</param>
        /// <param name="mobilePhoneNumber">The employee&#39;s mobile phone number..</param>
        /// <param name="employments">Array of &#x60;Employment&#x60; IDs for this Employee..</param>
        /// <param name="homeLocation">homeLocation.</param>
        /// <param name="workLocation">workLocation.</param>
        /// <param name="manager">manager.</param>
        /// <param name="team">team.</param>
        /// <param name="payGroup">payGroup.</param>
        /// <param name="ssn">The employee&#39;s social security number..</param>
        /// <param name="gender">The employee&#39;s gender..</param>
        /// <param name="ethnicity">The employee&#39;s ethnicity..</param>
        /// <param name="maritalStatus">The employee&#39;s marital status..</param>
        /// <param name="dateOfBirth">The employee&#39;s date of birth..</param>
        /// <param name="hireDate">The date that the employee was hired, usually the day that an offer letter is signed. If an employee has multiple hire dates from previous employments, this represents the most recent hire date. Note: If you&#39;re looking for the employee&#39;s start date, refer to the start_date field..</param>
        /// <param name="startDate">The date that the employee started working. If an employee has multiple start dates from previous employments, this represents the most recent start date..</param>
        /// <param name="employmentStatus">The employment status of the employee..</param>
        /// <param name="terminationDate">The employee&#39;s termination date..</param>
        /// <param name="avatar">The URL of the employee&#39;s avatar image..</param>
        /// <param name="customFields">Custom fields configured for a given model..</param>
        public EmployeeRequest(string remoteId = default(string), string employeeNumber = default(string), Guid? company = default(Guid?), string firstName = default(string), string lastName = default(string), string displayFullName = default(string), List<Guid?> groups = default(List<Guid?>), string workEmail = default(string), string personalEmail = default(string), string mobilePhoneNumber = default(string), List<Guid?> employments = default(List<Guid?>), Guid? homeLocation = default(Guid?), Guid? workLocation = default(Guid?), Guid? manager = default(Guid?), Guid? team = default(Guid?), Guid? payGroup = default(Guid?), string ssn = default(string), GenderEnum? gender = default(GenderEnum?), EthnicityEnum? ethnicity = default(EthnicityEnum?), MaritalStatusEnum? maritalStatus = default(MaritalStatusEnum?), DateTime? dateOfBirth = default(DateTime?), DateTime? hireDate = default(DateTime?), DateTime? startDate = default(DateTime?), EmploymentStatusEnum? employmentStatus = default(EmploymentStatusEnum?), DateTime? terminationDate = default(DateTime?), string avatar = default(string), Dictionary<string, Object> customFields = default(Dictionary<string, Object>))
        {
            this.RemoteId = remoteId;
            this.EmployeeNumber = employeeNumber;
            this.Company = company;
            this.FirstName = firstName;
            this.LastName = lastName;
            this.DisplayFullName = displayFullName;
            this.Groups = groups;
            this.WorkEmail = workEmail;
            this.PersonalEmail = personalEmail;
            this.MobilePhoneNumber = mobilePhoneNumber;
            this.Employments = employments;
            this.HomeLocation = homeLocation;
            this.WorkLocation = workLocation;
            this.Manager = manager;
            this.Team = team;
            this.PayGroup = payGroup;
            this.Ssn = ssn;
            this.Gender = gender;
            this.Ethnicity = ethnicity;
            this.MaritalStatus = maritalStatus;
            this.DateOfBirth = dateOfBirth;
            this.HireDate = hireDate;
            this.StartDate = startDate;
            this.EmploymentStatus = employmentStatus;
            this.TerminationDate = terminationDate;
            this.Avatar = avatar;
            this.CustomFields = customFields;
        }

        /// <summary>
        /// The third-party API ID of the matching object.
        /// </summary>
        /// <value>The third-party API ID of the matching object.</value>
        [DataMember(Name = "remote_id", EmitDefaultValue = true)]
        public string RemoteId { get; set; }

        /// <summary>
        /// The employee&#39;s number that appears in the remote UI. Note: This is distinct from the remote_id field, which is a unique identifier for the employee set by the remote API, and is not exposed to the user.
        /// </summary>
        /// <value>The employee&#39;s number that appears in the remote UI. Note: This is distinct from the remote_id field, which is a unique identifier for the employee set by the remote API, and is not exposed to the user.</value>
        [DataMember(Name = "employee_number", EmitDefaultValue = true)]
        public string EmployeeNumber { get; set; }

        /// <summary>
        /// Gets or Sets Company
        /// </summary>
        [DataMember(Name = "company", EmitDefaultValue = true)]
        public Guid? Company { get; set; }

        /// <summary>
        /// The employee&#39;s first name.
        /// </summary>
        /// <value>The employee&#39;s first name.</value>
        [DataMember(Name = "first_name", EmitDefaultValue = true)]
        public string FirstName { get; set; }

        /// <summary>
        /// The employee&#39;s last name.
        /// </summary>
        /// <value>The employee&#39;s last name.</value>
        [DataMember(Name = "last_name", EmitDefaultValue = true)]
        public string LastName { get; set; }

        /// <summary>
        /// The employee&#39;s full name, to use for display purposes. If a preferred first name is available, the full name will include the preferred first name.
        /// </summary>
        /// <value>The employee&#39;s full name, to use for display purposes. If a preferred first name is available, the full name will include the preferred first name.</value>
        [DataMember(Name = "display_full_name", EmitDefaultValue = true)]
        public string DisplayFullName { get; set; }

        /// <summary>
        /// Gets or Sets Groups
        /// </summary>
        [DataMember(Name = "groups", EmitDefaultValue = false)]
        public List<Guid?> Groups { get; set; }

        /// <summary>
        /// The employee&#39;s work email.
        /// </summary>
        /// <value>The employee&#39;s work email.</value>
        [DataMember(Name = "work_email", EmitDefaultValue = true)]
        public string WorkEmail { get; set; }

        /// <summary>
        /// The employee&#39;s personal email.
        /// </summary>
        /// <value>The employee&#39;s personal email.</value>
        [DataMember(Name = "personal_email", EmitDefaultValue = true)]
        public string PersonalEmail { get; set; }

        /// <summary>
        /// The employee&#39;s mobile phone number.
        /// </summary>
        /// <value>The employee&#39;s mobile phone number.</value>
        [DataMember(Name = "mobile_phone_number", EmitDefaultValue = true)]
        public string MobilePhoneNumber { get; set; }

        /// <summary>
        /// Array of &#x60;Employment&#x60; IDs for this Employee.
        /// </summary>
        /// <value>Array of &#x60;Employment&#x60; IDs for this Employee.</value>
        [DataMember(Name = "employments", EmitDefaultValue = false)]
        public List<Guid?> Employments { get; set; }

        /// <summary>
        /// Gets or Sets HomeLocation
        /// </summary>
        [DataMember(Name = "home_location", EmitDefaultValue = true)]
        public Guid? HomeLocation { get; set; }

        /// <summary>
        /// Gets or Sets WorkLocation
        /// </summary>
        [DataMember(Name = "work_location", EmitDefaultValue = true)]
        public Guid? WorkLocation { get; set; }

        /// <summary>
        /// Gets or Sets Manager
        /// </summary>
        [DataMember(Name = "manager", EmitDefaultValue = true)]
        public Guid? Manager { get; set; }

        /// <summary>
        /// Gets or Sets Team
        /// </summary>
        [DataMember(Name = "team", EmitDefaultValue = true)]
        public Guid? Team { get; set; }

        /// <summary>
        /// Gets or Sets PayGroup
        /// </summary>
        [DataMember(Name = "pay_group", EmitDefaultValue = true)]
        public Guid? PayGroup { get; set; }

        /// <summary>
        /// The employee&#39;s social security number.
        /// </summary>
        /// <value>The employee&#39;s social security number.</value>
        [DataMember(Name = "ssn", EmitDefaultValue = true)]
        public string Ssn { get; set; }

        /// <summary>
        /// The employee&#39;s date of birth.
        /// </summary>
        /// <value>The employee&#39;s date of birth.</value>
        [DataMember(Name = "date_of_birth", EmitDefaultValue = true)]
        public DateTime? DateOfBirth { get; set; }

        /// <summary>
        /// The date that the employee was hired, usually the day that an offer letter is signed. If an employee has multiple hire dates from previous employments, this represents the most recent hire date. Note: If you&#39;re looking for the employee&#39;s start date, refer to the start_date field.
        /// </summary>
        /// <value>The date that the employee was hired, usually the day that an offer letter is signed. If an employee has multiple hire dates from previous employments, this represents the most recent hire date. Note: If you&#39;re looking for the employee&#39;s start date, refer to the start_date field.</value>
        [DataMember(Name = "hire_date", EmitDefaultValue = true)]
        public DateTime? HireDate { get; set; }

        /// <summary>
        /// The date that the employee started working. If an employee has multiple start dates from previous employments, this represents the most recent start date.
        /// </summary>
        /// <value>The date that the employee started working. If an employee has multiple start dates from previous employments, this represents the most recent start date.</value>
        [DataMember(Name = "start_date", EmitDefaultValue = true)]
        public DateTime? StartDate { get; set; }

        /// <summary>
        /// The employee&#39;s termination date.
        /// </summary>
        /// <value>The employee&#39;s termination date.</value>
        [DataMember(Name = "termination_date", EmitDefaultValue = true)]
        public DateTime? TerminationDate { get; set; }

        /// <summary>
        /// The URL of the employee&#39;s avatar image.
        /// </summary>
        /// <value>The URL of the employee&#39;s avatar image.</value>
        [DataMember(Name = "avatar", EmitDefaultValue = true)]
        public string Avatar { get; set; }

        /// <summary>
        /// Custom fields configured for a given model.
        /// </summary>
        /// <value>Custom fields configured for a given model.</value>
        [DataMember(Name = "custom_fields", EmitDefaultValue = true)]
        public Dictionary<string, Object> CustomFields { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EmployeeRequest {\n");
            sb.Append("  RemoteId: ").Append(RemoteId).Append("\n");
            sb.Append("  EmployeeNumber: ").Append(EmployeeNumber).Append("\n");
            sb.Append("  Company: ").Append(Company).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  DisplayFullName: ").Append(DisplayFullName).Append("\n");
            sb.Append("  Groups: ").Append(Groups).Append("\n");
            sb.Append("  WorkEmail: ").Append(WorkEmail).Append("\n");
            sb.Append("  PersonalEmail: ").Append(PersonalEmail).Append("\n");
            sb.Append("  MobilePhoneNumber: ").Append(MobilePhoneNumber).Append("\n");
            sb.Append("  Employments: ").Append(Employments).Append("\n");
            sb.Append("  HomeLocation: ").Append(HomeLocation).Append("\n");
            sb.Append("  WorkLocation: ").Append(WorkLocation).Append("\n");
            sb.Append("  Manager: ").Append(Manager).Append("\n");
            sb.Append("  Team: ").Append(Team).Append("\n");
            sb.Append("  PayGroup: ").Append(PayGroup).Append("\n");
            sb.Append("  Ssn: ").Append(Ssn).Append("\n");
            sb.Append("  Gender: ").Append(Gender).Append("\n");
            sb.Append("  Ethnicity: ").Append(Ethnicity).Append("\n");
            sb.Append("  MaritalStatus: ").Append(MaritalStatus).Append("\n");
            sb.Append("  DateOfBirth: ").Append(DateOfBirth).Append("\n");
            sb.Append("  HireDate: ").Append(HireDate).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  EmploymentStatus: ").Append(EmploymentStatus).Append("\n");
            sb.Append("  TerminationDate: ").Append(TerminationDate).Append("\n");
            sb.Append("  Avatar: ").Append(Avatar).Append("\n");
            sb.Append("  CustomFields: ").Append(CustomFields).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EmployeeRequest);
        }

        /// <summary>
        /// Returns true if EmployeeRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of EmployeeRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EmployeeRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.RemoteId == input.RemoteId ||
                    (this.RemoteId != null &&
                    this.RemoteId.Equals(input.RemoteId))
                ) && 
                (
                    this.EmployeeNumber == input.EmployeeNumber ||
                    (this.EmployeeNumber != null &&
                    this.EmployeeNumber.Equals(input.EmployeeNumber))
                ) && 
                (
                    this.Company == input.Company ||
                    (this.Company != null &&
                    this.Company.Equals(input.Company))
                ) && 
                (
                    this.FirstName == input.FirstName ||
                    (this.FirstName != null &&
                    this.FirstName.Equals(input.FirstName))
                ) && 
                (
                    this.LastName == input.LastName ||
                    (this.LastName != null &&
                    this.LastName.Equals(input.LastName))
                ) && 
                (
                    this.DisplayFullName == input.DisplayFullName ||
                    (this.DisplayFullName != null &&
                    this.DisplayFullName.Equals(input.DisplayFullName))
                ) && 
                (
                    this.Groups == input.Groups ||
                    this.Groups != null &&
                    input.Groups != null &&
                    this.Groups.SequenceEqual(input.Groups)
                ) && 
                (
                    this.WorkEmail == input.WorkEmail ||
                    (this.WorkEmail != null &&
                    this.WorkEmail.Equals(input.WorkEmail))
                ) && 
                (
                    this.PersonalEmail == input.PersonalEmail ||
                    (this.PersonalEmail != null &&
                    this.PersonalEmail.Equals(input.PersonalEmail))
                ) && 
                (
                    this.MobilePhoneNumber == input.MobilePhoneNumber ||
                    (this.MobilePhoneNumber != null &&
                    this.MobilePhoneNumber.Equals(input.MobilePhoneNumber))
                ) && 
                (
                    this.Employments == input.Employments ||
                    this.Employments != null &&
                    input.Employments != null &&
                    this.Employments.SequenceEqual(input.Employments)
                ) && 
                (
                    this.HomeLocation == input.HomeLocation ||
                    (this.HomeLocation != null &&
                    this.HomeLocation.Equals(input.HomeLocation))
                ) && 
                (
                    this.WorkLocation == input.WorkLocation ||
                    (this.WorkLocation != null &&
                    this.WorkLocation.Equals(input.WorkLocation))
                ) && 
                (
                    this.Manager == input.Manager ||
                    (this.Manager != null &&
                    this.Manager.Equals(input.Manager))
                ) && 
                (
                    this.Team == input.Team ||
                    (this.Team != null &&
                    this.Team.Equals(input.Team))
                ) && 
                (
                    this.PayGroup == input.PayGroup ||
                    (this.PayGroup != null &&
                    this.PayGroup.Equals(input.PayGroup))
                ) && 
                (
                    this.Ssn == input.Ssn ||
                    (this.Ssn != null &&
                    this.Ssn.Equals(input.Ssn))
                ) && 
                (
                    this.Gender == input.Gender ||
                    this.Gender.Equals(input.Gender)
                ) && 
                (
                    this.Ethnicity == input.Ethnicity ||
                    this.Ethnicity.Equals(input.Ethnicity)
                ) && 
                (
                    this.MaritalStatus == input.MaritalStatus ||
                    this.MaritalStatus.Equals(input.MaritalStatus)
                ) && 
                (
                    this.DateOfBirth == input.DateOfBirth ||
                    (this.DateOfBirth != null &&
                    this.DateOfBirth.Equals(input.DateOfBirth))
                ) && 
                (
                    this.HireDate == input.HireDate ||
                    (this.HireDate != null &&
                    this.HireDate.Equals(input.HireDate))
                ) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && 
                (
                    this.EmploymentStatus == input.EmploymentStatus ||
                    this.EmploymentStatus.Equals(input.EmploymentStatus)
                ) && 
                (
                    this.TerminationDate == input.TerminationDate ||
                    (this.TerminationDate != null &&
                    this.TerminationDate.Equals(input.TerminationDate))
                ) && 
                (
                    this.Avatar == input.Avatar ||
                    (this.Avatar != null &&
                    this.Avatar.Equals(input.Avatar))
                ) && 
                (
                    this.CustomFields == input.CustomFields ||
                    this.CustomFields != null &&
                    input.CustomFields != null &&
                    this.CustomFields.SequenceEqual(input.CustomFields)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RemoteId != null)
                    hashCode = hashCode * 59 + this.RemoteId.GetHashCode();
                if (this.EmployeeNumber != null)
                    hashCode = hashCode * 59 + this.EmployeeNumber.GetHashCode();
                if (this.Company != null)
                    hashCode = hashCode * 59 + this.Company.GetHashCode();
                if (this.FirstName != null)
                    hashCode = hashCode * 59 + this.FirstName.GetHashCode();
                if (this.LastName != null)
                    hashCode = hashCode * 59 + this.LastName.GetHashCode();
                if (this.DisplayFullName != null)
                    hashCode = hashCode * 59 + this.DisplayFullName.GetHashCode();
                if (this.Groups != null)
                    hashCode = hashCode * 59 + this.Groups.GetHashCode();
                if (this.WorkEmail != null)
                    hashCode = hashCode * 59 + this.WorkEmail.GetHashCode();
                if (this.PersonalEmail != null)
                    hashCode = hashCode * 59 + this.PersonalEmail.GetHashCode();
                if (this.MobilePhoneNumber != null)
                    hashCode = hashCode * 59 + this.MobilePhoneNumber.GetHashCode();
                if (this.Employments != null)
                    hashCode = hashCode * 59 + this.Employments.GetHashCode();
                if (this.HomeLocation != null)
                    hashCode = hashCode * 59 + this.HomeLocation.GetHashCode();
                if (this.WorkLocation != null)
                    hashCode = hashCode * 59 + this.WorkLocation.GetHashCode();
                if (this.Manager != null)
                    hashCode = hashCode * 59 + this.Manager.GetHashCode();
                if (this.Team != null)
                    hashCode = hashCode * 59 + this.Team.GetHashCode();
                if (this.PayGroup != null)
                    hashCode = hashCode * 59 + this.PayGroup.GetHashCode();
                if (this.Ssn != null)
                    hashCode = hashCode * 59 + this.Ssn.GetHashCode();
                hashCode = hashCode * 59 + this.Gender.GetHashCode();
                hashCode = hashCode * 59 + this.Ethnicity.GetHashCode();
                hashCode = hashCode * 59 + this.MaritalStatus.GetHashCode();
                if (this.DateOfBirth != null)
                    hashCode = hashCode * 59 + this.DateOfBirth.GetHashCode();
                if (this.HireDate != null)
                    hashCode = hashCode * 59 + this.HireDate.GetHashCode();
                if (this.StartDate != null)
                    hashCode = hashCode * 59 + this.StartDate.GetHashCode();
                hashCode = hashCode * 59 + this.EmploymentStatus.GetHashCode();
                if (this.TerminationDate != null)
                    hashCode = hashCode * 59 + this.TerminationDate.GetHashCode();
                if (this.Avatar != null)
                    hashCode = hashCode * 59 + this.Avatar.GetHashCode();
                if (this.CustomFields != null)
                    hashCode = hashCode * 59 + this.CustomFields.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // WorkEmail (string) maxLength
            if(this.WorkEmail != null && this.WorkEmail.Length > 254)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for WorkEmail, length must be less than 254.", new [] { "WorkEmail" });
            }

            // PersonalEmail (string) maxLength
            if(this.PersonalEmail != null && this.PersonalEmail.Length > 254)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PersonalEmail, length must be less than 254.", new [] { "PersonalEmail" });
            }

            // Ssn (string) maxLength
            if(this.Ssn != null && this.Ssn.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Ssn, length must be less than 100.", new [] { "Ssn" });
            }

            // Avatar (string) maxLength
            if(this.Avatar != null && this.Avatar.Length > 2000)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Avatar, length must be less than 2000.", new [] { "Avatar" });
            }

            yield break;
        }
    }

}
