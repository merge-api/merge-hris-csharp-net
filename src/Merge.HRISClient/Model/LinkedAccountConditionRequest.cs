/*
 * Merge HRIS API
 *
 * The unified API for building rich integrations with multiple HR Information System platforms.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hello@merge.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Merge.HRISClient.Client.OpenAPIDateConverter;

namespace Merge.HRISClient.Model
{
    /// <summary>
    /// LinkedAccountConditionRequest
    /// </summary>
    [DataContract(Name = "LinkedAccountConditionRequest")]
    public partial class LinkedAccountConditionRequest : IEquatable<LinkedAccountConditionRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LinkedAccountConditionRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected LinkedAccountConditionRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="LinkedAccountConditionRequest" /> class.
        /// </summary>
        /// <param name="conditionSchemaId">The ID indicating which condition schema to use for a specific condition. (required).</param>
        /// <param name="_operator">The operator for a specific condition. (required).</param>
        /// <param name="value">The value for a specific condition. (required).</param>
        public LinkedAccountConditionRequest(Guid conditionSchemaId = default(Guid), string _operator = default(string), Object value = default(Object))
        {
            this.ConditionSchemaId = conditionSchemaId;
            // to ensure "_operator" is required (not null)
            this.Operator = _operator ?? throw new ArgumentNullException("_operator is a required property for LinkedAccountConditionRequest and cannot be null");
            // to ensure "value" is required (not null)
            this.Value = value ?? throw new ArgumentNullException("value is a required property for LinkedAccountConditionRequest and cannot be null");
        }

        /// <summary>
        /// The ID indicating which condition schema to use for a specific condition.
        /// </summary>
        /// <value>The ID indicating which condition schema to use for a specific condition.</value>
        [DataMember(Name = "condition_schema_id", IsRequired = true, EmitDefaultValue = false)]
        public Guid ConditionSchemaId { get; set; }

        /// <summary>
        /// The operator for a specific condition.
        /// </summary>
        /// <value>The operator for a specific condition.</value>
        [DataMember(Name = "operator", IsRequired = true, EmitDefaultValue = false)]
        public string Operator { get; set; }

        /// <summary>
        /// The value for a specific condition.
        /// </summary>
        /// <value>The value for a specific condition.</value>
        [DataMember(Name = "value", IsRequired = true, EmitDefaultValue = true)]
        public Object Value { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LinkedAccountConditionRequest {\n");
            sb.Append("  ConditionSchemaId: ").Append(ConditionSchemaId).Append("\n");
            sb.Append("  Operator: ").Append(Operator).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LinkedAccountConditionRequest);
        }

        /// <summary>
        /// Returns true if LinkedAccountConditionRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of LinkedAccountConditionRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LinkedAccountConditionRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ConditionSchemaId == input.ConditionSchemaId ||
                    (this.ConditionSchemaId != null &&
                    this.ConditionSchemaId.Equals(input.ConditionSchemaId))
                ) && 
                (
                    this.Operator == input.Operator ||
                    (this.Operator != null &&
                    this.Operator.Equals(input.Operator))
                ) && 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ConditionSchemaId != null)
                    hashCode = hashCode * 59 + this.ConditionSchemaId.GetHashCode();
                if (this.Operator != null)
                    hashCode = hashCode * 59 + this.Operator.GetHashCode();
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Operator (string) minLength
            if(this.Operator != null && this.Operator.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Operator, length must be greater than 1.", new [] { "Operator" });
            }

            yield break;
        }
    }

}
