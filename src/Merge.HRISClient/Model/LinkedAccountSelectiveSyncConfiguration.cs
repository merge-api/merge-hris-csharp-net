/*
 * Merge HRIS API
 *
 * The unified API for building rich integrations with multiple HR Information System platforms.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hello@merge.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Merge.HRISClient.Client.OpenAPIDateConverter;

namespace Merge.HRISClient.Model
{
    /// <summary>
    /// LinkedAccountSelectiveSyncConfiguration
    /// </summary>
    [DataContract(Name = "LinkedAccountSelectiveSyncConfiguration")]
    public partial class LinkedAccountSelectiveSyncConfiguration : IEquatable<LinkedAccountSelectiveSyncConfiguration>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LinkedAccountSelectiveSyncConfiguration" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public LinkedAccountSelectiveSyncConfiguration()
        {
        }

        /// <summary>
        /// The conditions belonging to a selective sync.
        /// </summary>
        /// <value>The conditions belonging to a selective sync.</value>
        [DataMember(Name = "linked_account_conditions", EmitDefaultValue = false)]
        public List<LinkedAccountCondition> LinkedAccountConditions { get; private set; }

        /// <summary>
        /// Returns false as LinkedAccountConditions should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeLinkedAccountConditions()
        {
            return false;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LinkedAccountSelectiveSyncConfiguration {\n");
            sb.Append("  LinkedAccountConditions: ").Append(LinkedAccountConditions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LinkedAccountSelectiveSyncConfiguration);
        }

        /// <summary>
        /// Returns true if LinkedAccountSelectiveSyncConfiguration instances are equal
        /// </summary>
        /// <param name="input">Instance of LinkedAccountSelectiveSyncConfiguration to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LinkedAccountSelectiveSyncConfiguration input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.LinkedAccountConditions == input.LinkedAccountConditions ||
                    this.LinkedAccountConditions != null &&
                    input.LinkedAccountConditions != null &&
                    this.LinkedAccountConditions.SequenceEqual(input.LinkedAccountConditions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LinkedAccountConditions != null)
                    hashCode = hashCode * 59 + this.LinkedAccountConditions.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
