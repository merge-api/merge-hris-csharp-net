/*
 * Merge HRIS API
 *
 * The unified API for building rich integrations with multiple HR Information System platforms.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hello@merge.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Merge.HRISClient.Client.OpenAPIDateConverter;

namespace Merge.HRISClient.Model
{
    /// <summary>
    /// CommonModelScopesBodyRequest
    /// </summary>
    [DataContract(Name = "CommonModelScopesBodyRequest")]
    public partial class CommonModelScopesBodyRequest : IEquatable<CommonModelScopesBodyRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CommonModelScopesBodyRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CommonModelScopesBodyRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CommonModelScopesBodyRequest" /> class.
        /// </summary>
        /// <param name="modelId">modelId (required).</param>
        /// <param name="enabledActions">enabledActions (required).</param>
        /// <param name="disabledFields">disabledFields (required).</param>
        public CommonModelScopesBodyRequest(string modelId = default(string), List<EnabledActionsEnum> enabledActions = default(List<EnabledActionsEnum>), List<string> disabledFields = default(List<string>))
        {
            // to ensure "modelId" is required (not null)
            this.ModelId = modelId ?? throw new ArgumentNullException("modelId is a required property for CommonModelScopesBodyRequest and cannot be null");
            // to ensure "enabledActions" is required (not null)
            this.EnabledActions = enabledActions ?? throw new ArgumentNullException("enabledActions is a required property for CommonModelScopesBodyRequest and cannot be null");
            // to ensure "disabledFields" is required (not null)
            this.DisabledFields = disabledFields ?? throw new ArgumentNullException("disabledFields is a required property for CommonModelScopesBodyRequest and cannot be null");
        }

        /// <summary>
        /// Gets or Sets ModelId
        /// </summary>
        [DataMember(Name = "model_id", IsRequired = true, EmitDefaultValue = false)]
        public string ModelId { get; set; }

        /// <summary>
        /// Gets or Sets EnabledActions
        /// </summary>
        [DataMember(Name = "enabled_actions", IsRequired = true, EmitDefaultValue = false)]
        public List<EnabledActionsEnum> EnabledActions { get; set; }

        /// <summary>
        /// Gets or Sets DisabledFields
        /// </summary>
        [DataMember(Name = "disabled_fields", IsRequired = true, EmitDefaultValue = false)]
        public List<string> DisabledFields { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CommonModelScopesBodyRequest {\n");
            sb.Append("  ModelId: ").Append(ModelId).Append("\n");
            sb.Append("  EnabledActions: ").Append(EnabledActions).Append("\n");
            sb.Append("  DisabledFields: ").Append(DisabledFields).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CommonModelScopesBodyRequest);
        }

        /// <summary>
        /// Returns true if CommonModelScopesBodyRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CommonModelScopesBodyRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CommonModelScopesBodyRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ModelId == input.ModelId ||
                    (this.ModelId != null &&
                    this.ModelId.Equals(input.ModelId))
                ) && 
                (
                    this.EnabledActions == input.EnabledActions ||
                    this.EnabledActions != null &&
                    input.EnabledActions != null &&
                    this.EnabledActions.SequenceEqual(input.EnabledActions)
                ) && 
                (
                    this.DisabledFields == input.DisabledFields ||
                    this.DisabledFields != null &&
                    input.DisabledFields != null &&
                    this.DisabledFields.SequenceEqual(input.DisabledFields)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ModelId != null)
                    hashCode = hashCode * 59 + this.ModelId.GetHashCode();
                if (this.EnabledActions != null)
                    hashCode = hashCode * 59 + this.EnabledActions.GetHashCode();
                if (this.DisabledFields != null)
                    hashCode = hashCode * 59 + this.DisabledFields.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // ModelId (string) minLength
            if(this.ModelId != null && this.ModelId.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ModelId, length must be greater than 1.", new [] { "ModelId" });
            }

            yield break;
        }
    }

}
