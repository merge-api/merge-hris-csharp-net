/*
 * Merge HRIS API
 *
 * The unified API for building rich integrations with multiple HR Information System platforms.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hello@merge.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Merge.HRISClient.Client.OpenAPIDateConverter;

namespace Merge.HRISClient.Model
{
    /// <summary>
    /// # The SyncStatus Object ### Description The &#x60;SyncStatus&#x60; object is used to represent the syncing state of an account  ### Usage Example View the &#x60;SyncStatus&#x60; for an account to see how recently its models were synced.
    /// </summary>
    [DataContract(Name = "SyncStatus")]
    public partial class SyncStatus : IEquatable<SyncStatus>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = false)]
        public SyncStatusStatusEnum Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SyncStatus" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SyncStatus() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SyncStatus" /> class.
        /// </summary>
        /// <param name="modelName">modelName (required).</param>
        /// <param name="modelId">modelId (required).</param>
        /// <param name="lastSyncStart">lastSyncStart.</param>
        /// <param name="nextSyncStart">nextSyncStart.</param>
        /// <param name="status">status (required).</param>
        /// <param name="isInitialSync">isInitialSync (required).</param>
        public SyncStatus(string modelName = default(string), string modelId = default(string), DateTime lastSyncStart = default(DateTime), DateTime nextSyncStart = default(DateTime), SyncStatusStatusEnum status = default(SyncStatusStatusEnum), bool isInitialSync = default(bool))
        {
            // to ensure "modelName" is required (not null)
            this.ModelName = modelName ?? throw new ArgumentNullException("modelName is a required property for SyncStatus and cannot be null");
            // to ensure "modelId" is required (not null)
            this.ModelId = modelId ?? throw new ArgumentNullException("modelId is a required property for SyncStatus and cannot be null");
            this.Status = status;
            this.IsInitialSync = isInitialSync;
            this.LastSyncStart = lastSyncStart;
            this.NextSyncStart = nextSyncStart;
        }

        /// <summary>
        /// Gets or Sets ModelName
        /// </summary>
        [DataMember(Name = "model_name", IsRequired = true, EmitDefaultValue = false)]
        public string ModelName { get; set; }

        /// <summary>
        /// Gets or Sets ModelId
        /// </summary>
        [DataMember(Name = "model_id", IsRequired = true, EmitDefaultValue = false)]
        public string ModelId { get; set; }

        /// <summary>
        /// Gets or Sets LastSyncStart
        /// </summary>
        [DataMember(Name = "last_sync_start", EmitDefaultValue = false)]
        public DateTime LastSyncStart { get; set; }

        /// <summary>
        /// Gets or Sets NextSyncStart
        /// </summary>
        [DataMember(Name = "next_sync_start", EmitDefaultValue = false)]
        public DateTime NextSyncStart { get; set; }

        /// <summary>
        /// Gets or Sets IsInitialSync
        /// </summary>
        [DataMember(Name = "is_initial_sync", IsRequired = true, EmitDefaultValue = true)]
        public bool IsInitialSync { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SyncStatus {\n");
            sb.Append("  ModelName: ").Append(ModelName).Append("\n");
            sb.Append("  ModelId: ").Append(ModelId).Append("\n");
            sb.Append("  LastSyncStart: ").Append(LastSyncStart).Append("\n");
            sb.Append("  NextSyncStart: ").Append(NextSyncStart).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  IsInitialSync: ").Append(IsInitialSync).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SyncStatus);
        }

        /// <summary>
        /// Returns true if SyncStatus instances are equal
        /// </summary>
        /// <param name="input">Instance of SyncStatus to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SyncStatus input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ModelName == input.ModelName ||
                    (this.ModelName != null &&
                    this.ModelName.Equals(input.ModelName))
                ) && 
                (
                    this.ModelId == input.ModelId ||
                    (this.ModelId != null &&
                    this.ModelId.Equals(input.ModelId))
                ) && 
                (
                    this.LastSyncStart == input.LastSyncStart ||
                    (this.LastSyncStart != null &&
                    this.LastSyncStart.Equals(input.LastSyncStart))
                ) && 
                (
                    this.NextSyncStart == input.NextSyncStart ||
                    (this.NextSyncStart != null &&
                    this.NextSyncStart.Equals(input.NextSyncStart))
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.IsInitialSync == input.IsInitialSync ||
                    this.IsInitialSync.Equals(input.IsInitialSync)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ModelName != null)
                    hashCode = hashCode * 59 + this.ModelName.GetHashCode();
                if (this.ModelId != null)
                    hashCode = hashCode * 59 + this.ModelId.GetHashCode();
                if (this.LastSyncStart != null)
                    hashCode = hashCode * 59 + this.LastSyncStart.GetHashCode();
                if (this.NextSyncStart != null)
                    hashCode = hashCode * 59 + this.NextSyncStart.GetHashCode();
                hashCode = hashCode * 59 + this.Status.GetHashCode();
                hashCode = hashCode * 59 + this.IsInitialSync.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
