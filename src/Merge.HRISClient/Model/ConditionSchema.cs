/*
 * Merge HRIS API
 *
 * The unified API for building rich integrations with multiple HR Information System platforms.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hello@merge.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Merge.HRISClient.Client.OpenAPIDateConverter;

namespace Merge.HRISClient.Model
{
    /// <summary>
    /// ConditionSchema
    /// </summary>
    [DataContract(Name = "ConditionSchema")]
    public partial class ConditionSchema : IEquatable<ConditionSchema>, IValidatableObject
    {

        /// <summary>
        /// The type of value(s) that can be set for this condition.  * &#x60;BOOLEAN&#x60; - BOOLEAN * &#x60;DATE&#x60; - DATE * &#x60;DATE_TIME&#x60; - DATE_TIME * &#x60;INTEGER&#x60; - INTEGER * &#x60;FLOAT&#x60; - FLOAT * &#x60;STRING&#x60; - STRING * &#x60;LIST_OF_STRINGS&#x60; - LIST_OF_STRINGS
        /// </summary>
        /// <value>The type of value(s) that can be set for this condition.  * &#x60;BOOLEAN&#x60; - BOOLEAN * &#x60;DATE&#x60; - DATE * &#x60;DATE_TIME&#x60; - DATE_TIME * &#x60;INTEGER&#x60; - INTEGER * &#x60;FLOAT&#x60; - FLOAT * &#x60;STRING&#x60; - STRING * &#x60;LIST_OF_STRINGS&#x60; - LIST_OF_STRINGS</value>
        [DataMember(Name = "condition_type", IsRequired = true, EmitDefaultValue = false)]
        public ConditionTypeEnum ConditionType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ConditionSchema" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ConditionSchema() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ConditionSchema" /> class.
        /// </summary>
        /// <param name="id">The ID of the condition schema. This ID is used when updating selective syncs for a linked account. (required).</param>
        /// <param name="nativeName">User-facing *native condition* name. e.g. \&quot;Skip Manager\&quot;. (required).</param>
        /// <param name="fieldName">The name of the field on the common model that this condition corresponds to, if they conceptually match. e.g. \&quot;location_type\&quot;. (required).</param>
        /// <param name="isUnique">Whether this condition can only be applied once. If false, the condition can be AND&#39;d together multiple times..</param>
        /// <param name="conditionType">The type of value(s) that can be set for this condition.  * &#x60;BOOLEAN&#x60; - BOOLEAN * &#x60;DATE&#x60; - DATE * &#x60;DATE_TIME&#x60; - DATE_TIME * &#x60;INTEGER&#x60; - INTEGER * &#x60;FLOAT&#x60; - FLOAT * &#x60;STRING&#x60; - STRING * &#x60;LIST_OF_STRINGS&#x60; - LIST_OF_STRINGS (required).</param>
        /// <param name="operators">The schemas for the operators that can be used on a condition. (required).</param>
        public ConditionSchema(Guid id = default(Guid), string nativeName = default(string), string fieldName = default(string), bool isUnique = default(bool), ConditionTypeEnum conditionType = default(ConditionTypeEnum), List<OperatorSchema> operators = default(List<OperatorSchema>))
        {
            this.Id = id;
            // to ensure "nativeName" is required (not null)
            this.NativeName = nativeName ?? throw new ArgumentNullException("nativeName is a required property for ConditionSchema and cannot be null");
            // to ensure "fieldName" is required (not null)
            this.FieldName = fieldName ?? throw new ArgumentNullException("fieldName is a required property for ConditionSchema and cannot be null");
            this.ConditionType = conditionType;
            // to ensure "operators" is required (not null)
            this.Operators = operators ?? throw new ArgumentNullException("operators is a required property for ConditionSchema and cannot be null");
            this.IsUnique = isUnique;
        }

        /// <summary>
        /// The ID of the condition schema. This ID is used when updating selective syncs for a linked account.
        /// </summary>
        /// <value>The ID of the condition schema. This ID is used when updating selective syncs for a linked account.</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = false)]
        public Guid Id { get; set; }

        /// <summary>
        /// The common model for which a condition schema is defined.
        /// </summary>
        /// <value>The common model for which a condition schema is defined.</value>
        [DataMember(Name = "common_model", EmitDefaultValue = false)]
        public string CommonModel { get; private set; }

        /// <summary>
        /// Returns false as CommonModel should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCommonModel()
        {
            return false;
        }

        /// <summary>
        /// User-facing *native condition* name. e.g. \&quot;Skip Manager\&quot;.
        /// </summary>
        /// <value>User-facing *native condition* name. e.g. \&quot;Skip Manager\&quot;.</value>
        [DataMember(Name = "native_name", IsRequired = true, EmitDefaultValue = true)]
        public string NativeName { get; set; }

        /// <summary>
        /// The name of the field on the common model that this condition corresponds to, if they conceptually match. e.g. \&quot;location_type\&quot;.
        /// </summary>
        /// <value>The name of the field on the common model that this condition corresponds to, if they conceptually match. e.g. \&quot;location_type\&quot;.</value>
        [DataMember(Name = "field_name", IsRequired = true, EmitDefaultValue = true)]
        public string FieldName { get; set; }

        /// <summary>
        /// Whether this condition can only be applied once. If false, the condition can be AND&#39;d together multiple times.
        /// </summary>
        /// <value>Whether this condition can only be applied once. If false, the condition can be AND&#39;d together multiple times.</value>
        [DataMember(Name = "is_unique", EmitDefaultValue = true)]
        public bool IsUnique { get; set; }

        /// <summary>
        /// The schemas for the operators that can be used on a condition.
        /// </summary>
        /// <value>The schemas for the operators that can be used on a condition.</value>
        [DataMember(Name = "operators", IsRequired = true, EmitDefaultValue = false)]
        public List<OperatorSchema> Operators { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ConditionSchema {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CommonModel: ").Append(CommonModel).Append("\n");
            sb.Append("  NativeName: ").Append(NativeName).Append("\n");
            sb.Append("  FieldName: ").Append(FieldName).Append("\n");
            sb.Append("  IsUnique: ").Append(IsUnique).Append("\n");
            sb.Append("  ConditionType: ").Append(ConditionType).Append("\n");
            sb.Append("  Operators: ").Append(Operators).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ConditionSchema);
        }

        /// <summary>
        /// Returns true if ConditionSchema instances are equal
        /// </summary>
        /// <param name="input">Instance of ConditionSchema to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ConditionSchema input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.CommonModel == input.CommonModel ||
                    (this.CommonModel != null &&
                    this.CommonModel.Equals(input.CommonModel))
                ) && 
                (
                    this.NativeName == input.NativeName ||
                    (this.NativeName != null &&
                    this.NativeName.Equals(input.NativeName))
                ) && 
                (
                    this.FieldName == input.FieldName ||
                    (this.FieldName != null &&
                    this.FieldName.Equals(input.FieldName))
                ) && 
                (
                    this.IsUnique == input.IsUnique ||
                    this.IsUnique.Equals(input.IsUnique)
                ) && 
                (
                    this.ConditionType == input.ConditionType ||
                    this.ConditionType.Equals(input.ConditionType)
                ) && 
                (
                    this.Operators == input.Operators ||
                    this.Operators != null &&
                    input.Operators != null &&
                    this.Operators.SequenceEqual(input.Operators)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.CommonModel != null)
                    hashCode = hashCode * 59 + this.CommonModel.GetHashCode();
                if (this.NativeName != null)
                    hashCode = hashCode * 59 + this.NativeName.GetHashCode();
                if (this.FieldName != null)
                    hashCode = hashCode * 59 + this.FieldName.GetHashCode();
                hashCode = hashCode * 59 + this.IsUnique.GetHashCode();
                hashCode = hashCode * 59 + this.ConditionType.GetHashCode();
                if (this.Operators != null)
                    hashCode = hashCode * 59 + this.Operators.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
