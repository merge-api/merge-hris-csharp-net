/*
 * Merge HRIS API
 *
 * The unified API for building rich integrations with multiple HR Information System platforms.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hello@merge.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Merge.HRISClient.Client.OpenAPIDateConverter;

namespace Merge.HRISClient.Model
{
    /// <summary>
    /// # The Earning Object ### Description The &#x60;Earning&#x60; object is used to represent an earning for a given employee&#39;s payroll run. One run could include several earnings.  ### Usage Example Fetch from the &#x60;LIST Earnings&#x60; endpoint and filter by &#x60;ID&#x60; to show all earnings.
    /// </summary>
    [DataContract(Name = "Earning")]
    public partial class Earning : IEquatable<Earning>, IValidatableObject
    {

        /// <summary>
        /// The type of earning.
        /// </summary>
        /// <value>The type of earning.</value>
        [DataMember(Name = "type", EmitDefaultValue = true)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Earning" /> class.
        /// </summary>
        /// <param name="employeePayrollRun">The earning&#39;s employee payroll run..</param>
        /// <param name="amount">The amount earned..</param>
        /// <param name="type">The type of earning..</param>
        /// <param name="remoteData">remoteData.</param>
        public Earning(Guid? employeePayrollRun = default(Guid?), float? amount = default(float?), TypeEnum? type = default(TypeEnum?), List<Dictionary<string, Object>> remoteData = default(List<Dictionary<string, Object>>))
        {
            this.EmployeePayrollRun = employeePayrollRun;
            this.Amount = amount;
            this.Type = type;
            this.RemoteData = remoteData;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public Guid Id { get; private set; }

        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return false;
        }

        /// <summary>
        /// The earning&#39;s employee payroll run.
        /// </summary>
        /// <value>The earning&#39;s employee payroll run.</value>
        [DataMember(Name = "employee_payroll_run", EmitDefaultValue = true)]
        public Guid? EmployeePayrollRun { get; set; }

        /// <summary>
        /// The amount earned.
        /// </summary>
        /// <value>The amount earned.</value>
        [DataMember(Name = "amount", EmitDefaultValue = true)]
        public float? Amount { get; set; }

        /// <summary>
        /// Gets or Sets RemoteData
        /// </summary>
        [DataMember(Name = "remote_data", EmitDefaultValue = true)]
        public List<Dictionary<string, Object>> RemoteData { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Earning {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  EmployeePayrollRun: ").Append(EmployeePayrollRun).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  RemoteData: ").Append(RemoteData).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Earning);
        }

        /// <summary>
        /// Returns true if Earning instances are equal
        /// </summary>
        /// <param name="input">Instance of Earning to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Earning input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.EmployeePayrollRun == input.EmployeePayrollRun ||
                    (this.EmployeePayrollRun != null &&
                    this.EmployeePayrollRun.Equals(input.EmployeePayrollRun))
                ) && 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.RemoteData == input.RemoteData ||
                    this.RemoteData != null &&
                    input.RemoteData != null &&
                    this.RemoteData.SequenceEqual(input.RemoteData)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.EmployeePayrollRun != null)
                    hashCode = hashCode * 59 + this.EmployeePayrollRun.GetHashCode();
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.RemoteData != null)
                    hashCode = hashCode * 59 + this.RemoteData.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
