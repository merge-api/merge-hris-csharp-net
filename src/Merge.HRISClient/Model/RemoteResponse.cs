/*
 * Merge HRIS API
 *
 * The unified API for building rich integrations with multiple HR Information System platforms.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hello@merge.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Merge.HRISClient.Client.OpenAPIDateConverter;

namespace Merge.HRISClient.Model
{
    /// <summary>
    /// # The RemoteResponse Object ### Description The &#x60;RemoteResponse&#x60; object is used to represent information returned from a third-party endpoint.  ### Usage Example View the &#x60;RemoteResponse&#x60; returned from your &#x60;DataPassthrough&#x60;.
    /// </summary>
    [DataContract(Name = "RemoteResponse")]
    public partial class RemoteResponse : IEquatable<RemoteResponse>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets ResponseType
        /// </summary>
        [DataMember(Name = "response_type", EmitDefaultValue = false)]
        public ResponseTypeEnum? ResponseType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="RemoteResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RemoteResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RemoteResponse" /> class.
        /// </summary>
        /// <param name="method">method (required).</param>
        /// <param name="path">path (required).</param>
        /// <param name="status">status (required).</param>
        /// <param name="response">response (required).</param>
        /// <param name="responseHeaders">responseHeaders.</param>
        /// <param name="responseType">responseType.</param>
        /// <param name="headers">headers.</param>
        public RemoteResponse(string method = default(string), string path = default(string), int status = default(int), Object response = default(Object), Dictionary<string, Object> responseHeaders = default(Dictionary<string, Object>), ResponseTypeEnum? responseType = default(ResponseTypeEnum?), Dictionary<string, Object> headers = default(Dictionary<string, Object>))
        {
            // to ensure "method" is required (not null)
            this.Method = method ?? throw new ArgumentNullException("method is a required property for RemoteResponse and cannot be null");
            // to ensure "path" is required (not null)
            this.Path = path ?? throw new ArgumentNullException("path is a required property for RemoteResponse and cannot be null");
            this.Status = status;
            // to ensure "response" is required (not null)
            this.Response = response ?? throw new ArgumentNullException("response is a required property for RemoteResponse and cannot be null");
            this.ResponseHeaders = responseHeaders;
            this.ResponseType = responseType;
            this.Headers = headers;
        }

        /// <summary>
        /// Gets or Sets Method
        /// </summary>
        [DataMember(Name = "method", IsRequired = true, EmitDefaultValue = false)]
        public string Method { get; set; }

        /// <summary>
        /// Gets or Sets Path
        /// </summary>
        [DataMember(Name = "path", IsRequired = true, EmitDefaultValue = false)]
        public string Path { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = false)]
        public int Status { get; set; }

        /// <summary>
        /// Gets or Sets Response
        /// </summary>
        [DataMember(Name = "response", IsRequired = true, EmitDefaultValue = true)]
        public Object Response { get; set; }

        /// <summary>
        /// Gets or Sets ResponseHeaders
        /// </summary>
        [DataMember(Name = "response_headers", EmitDefaultValue = false)]
        public Dictionary<string, Object> ResponseHeaders { get; set; }

        /// <summary>
        /// Gets or Sets Headers
        /// </summary>
        [DataMember(Name = "headers", EmitDefaultValue = false)]
        public Dictionary<string, Object> Headers { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RemoteResponse {\n");
            sb.Append("  Method: ").Append(Method).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Response: ").Append(Response).Append("\n");
            sb.Append("  ResponseHeaders: ").Append(ResponseHeaders).Append("\n");
            sb.Append("  ResponseType: ").Append(ResponseType).Append("\n");
            sb.Append("  Headers: ").Append(Headers).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RemoteResponse);
        }

        /// <summary>
        /// Returns true if RemoteResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of RemoteResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RemoteResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Method == input.Method ||
                    (this.Method != null &&
                    this.Method.Equals(input.Method))
                ) && 
                (
                    this.Path == input.Path ||
                    (this.Path != null &&
                    this.Path.Equals(input.Path))
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.Response == input.Response ||
                    (this.Response != null &&
                    this.Response.Equals(input.Response))
                ) && 
                (
                    this.ResponseHeaders == input.ResponseHeaders ||
                    this.ResponseHeaders != null &&
                    input.ResponseHeaders != null &&
                    this.ResponseHeaders.SequenceEqual(input.ResponseHeaders)
                ) && 
                (
                    this.ResponseType == input.ResponseType ||
                    this.ResponseType.Equals(input.ResponseType)
                ) && 
                (
                    this.Headers == input.Headers ||
                    this.Headers != null &&
                    input.Headers != null &&
                    this.Headers.SequenceEqual(input.Headers)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Method != null)
                    hashCode = hashCode * 59 + this.Method.GetHashCode();
                if (this.Path != null)
                    hashCode = hashCode * 59 + this.Path.GetHashCode();
                hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.Response != null)
                    hashCode = hashCode * 59 + this.Response.GetHashCode();
                if (this.ResponseHeaders != null)
                    hashCode = hashCode * 59 + this.ResponseHeaders.GetHashCode();
                hashCode = hashCode * 59 + this.ResponseType.GetHashCode();
                if (this.Headers != null)
                    hashCode = hashCode * 59 + this.Headers.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
