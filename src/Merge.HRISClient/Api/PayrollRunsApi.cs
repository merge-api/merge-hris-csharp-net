/*
 * Merge HRIS API
 *
 * The unified API for building rich integrations with multiple HR Information System platforms.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hello@merge.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Merge.HRISClient.Client;
using Merge.HRISClient.Model;

namespace Merge.HRISClient.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPayrollRunsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of &#x60;PayrollRun&#x60; objects.
        /// </remarks>
        /// <exception cref="Merge.HRISClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccountToken">Token identifying the end user.</param>
        /// <param name="createdAfter">If provided, will only return objects created after this datetime. (optional)</param>
        /// <param name="createdBefore">If provided, will only return objects created before this datetime. (optional)</param>
        /// <param name="cursor">The pagination cursor value. (optional)</param>
        /// <param name="endedAfter">If provided, will only return payroll runs ended after this datetime. (optional)</param>
        /// <param name="endedBefore">If provided, will only return payroll runs ended before this datetime. (optional)</param>
        /// <param name="includeDeletedData">Whether to include data that was marked as deleted by third party webhooks. (optional)</param>
        /// <param name="includeRemoteData">Whether to include the original data Merge fetched from the third-party to produce these models. (optional)</param>
        /// <param name="modifiedAfter">If provided, only objects synced by Merge after this date time will be returned. (optional)</param>
        /// <param name="modifiedBefore">If provided, only objects synced by Merge before this date time will be returned. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="remoteFields">Deprecated. Use show_enum_origins. (optional)</param>
        /// <param name="remoteId">The API provider&#39;s ID for the given object. (optional)</param>
        /// <param name="runType">If provided, will only return PayrollRun&#39;s with this status. Options: (&#39;REGULAR&#39;, &#39;OFF_CYCLE&#39;, &#39;CORRECTION&#39;, &#39;TERMINATION&#39;, &#39;SIGN_ON_BONUS&#39;)  * &#x60;REGULAR&#x60; - REGULAR * &#x60;OFF_CYCLE&#x60; - OFF_CYCLE * &#x60;CORRECTION&#x60; - CORRECTION * &#x60;TERMINATION&#x60; - TERMINATION * &#x60;SIGN_ON_BONUS&#x60; - SIGN_ON_BONUS (optional)</param>
        /// <param name="showEnumOrigins">Which fields should be returned in non-normalized form. (optional)</param>
        /// <param name="startedAfter">If provided, will only return payroll runs started after this datetime. (optional)</param>
        /// <param name="startedBefore">If provided, will only return payroll runs started before this datetime. (optional)</param>
        /// <returns>PaginatedPayrollRunList</returns>
        PaginatedPayrollRunList PayrollRunsList(string xAccountToken, DateTime? createdAfter = default(DateTime?), DateTime? createdBefore = default(DateTime?), string cursor = default(string), DateTime? endedAfter = default(DateTime?), DateTime? endedBefore = default(DateTime?), bool? includeDeletedData = default(bool?), bool? includeRemoteData = default(bool?), DateTime? modifiedAfter = default(DateTime?), DateTime? modifiedBefore = default(DateTime?), int? pageSize = default(int?), string remoteFields = default(string), string remoteId = default(string), string runType = default(string), string showEnumOrigins = default(string), DateTime? startedAfter = default(DateTime?), DateTime? startedBefore = default(DateTime?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of &#x60;PayrollRun&#x60; objects.
        /// </remarks>
        /// <exception cref="Merge.HRISClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccountToken">Token identifying the end user.</param>
        /// <param name="createdAfter">If provided, will only return objects created after this datetime. (optional)</param>
        /// <param name="createdBefore">If provided, will only return objects created before this datetime. (optional)</param>
        /// <param name="cursor">The pagination cursor value. (optional)</param>
        /// <param name="endedAfter">If provided, will only return payroll runs ended after this datetime. (optional)</param>
        /// <param name="endedBefore">If provided, will only return payroll runs ended before this datetime. (optional)</param>
        /// <param name="includeDeletedData">Whether to include data that was marked as deleted by third party webhooks. (optional)</param>
        /// <param name="includeRemoteData">Whether to include the original data Merge fetched from the third-party to produce these models. (optional)</param>
        /// <param name="modifiedAfter">If provided, only objects synced by Merge after this date time will be returned. (optional)</param>
        /// <param name="modifiedBefore">If provided, only objects synced by Merge before this date time will be returned. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="remoteFields">Deprecated. Use show_enum_origins. (optional)</param>
        /// <param name="remoteId">The API provider&#39;s ID for the given object. (optional)</param>
        /// <param name="runType">If provided, will only return PayrollRun&#39;s with this status. Options: (&#39;REGULAR&#39;, &#39;OFF_CYCLE&#39;, &#39;CORRECTION&#39;, &#39;TERMINATION&#39;, &#39;SIGN_ON_BONUS&#39;)  * &#x60;REGULAR&#x60; - REGULAR * &#x60;OFF_CYCLE&#x60; - OFF_CYCLE * &#x60;CORRECTION&#x60; - CORRECTION * &#x60;TERMINATION&#x60; - TERMINATION * &#x60;SIGN_ON_BONUS&#x60; - SIGN_ON_BONUS (optional)</param>
        /// <param name="showEnumOrigins">Which fields should be returned in non-normalized form. (optional)</param>
        /// <param name="startedAfter">If provided, will only return payroll runs started after this datetime. (optional)</param>
        /// <param name="startedBefore">If provided, will only return payroll runs started before this datetime. (optional)</param>
        /// <returns>ApiResponse of PaginatedPayrollRunList</returns>
        ApiResponse<PaginatedPayrollRunList> PayrollRunsListWithHttpInfo(string xAccountToken, DateTime? createdAfter = default(DateTime?), DateTime? createdBefore = default(DateTime?), string cursor = default(string), DateTime? endedAfter = default(DateTime?), DateTime? endedBefore = default(DateTime?), bool? includeDeletedData = default(bool?), bool? includeRemoteData = default(bool?), DateTime? modifiedAfter = default(DateTime?), DateTime? modifiedBefore = default(DateTime?), int? pageSize = default(int?), string remoteFields = default(string), string remoteId = default(string), string runType = default(string), string showEnumOrigins = default(string), DateTime? startedAfter = default(DateTime?), DateTime? startedBefore = default(DateTime?));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a &#x60;PayrollRun&#x60; object with the given &#x60;id&#x60;.
        /// </remarks>
        /// <exception cref="Merge.HRISClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccountToken">Token identifying the end user.</param>
        /// <param name="id"></param>
        /// <param name="includeRemoteData">Whether to include the original data Merge fetched from the third-party to produce these models. (optional)</param>
        /// <param name="remoteFields">Deprecated. Use show_enum_origins. (optional)</param>
        /// <param name="showEnumOrigins">Which fields should be returned in non-normalized form. (optional)</param>
        /// <returns>PayrollRun</returns>
        PayrollRun PayrollRunsRetrieve(string xAccountToken, Guid id, bool? includeRemoteData = default(bool?), string remoteFields = default(string), string showEnumOrigins = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a &#x60;PayrollRun&#x60; object with the given &#x60;id&#x60;.
        /// </remarks>
        /// <exception cref="Merge.HRISClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccountToken">Token identifying the end user.</param>
        /// <param name="id"></param>
        /// <param name="includeRemoteData">Whether to include the original data Merge fetched from the third-party to produce these models. (optional)</param>
        /// <param name="remoteFields">Deprecated. Use show_enum_origins. (optional)</param>
        /// <param name="showEnumOrigins">Which fields should be returned in non-normalized form. (optional)</param>
        /// <returns>ApiResponse of PayrollRun</returns>
        ApiResponse<PayrollRun> PayrollRunsRetrieveWithHttpInfo(string xAccountToken, Guid id, bool? includeRemoteData = default(bool?), string remoteFields = default(string), string showEnumOrigins = default(string));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPayrollRunsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of &#x60;PayrollRun&#x60; objects.
        /// </remarks>
        /// <exception cref="Merge.HRISClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccountToken">Token identifying the end user.</param>
        /// <param name="createdAfter">If provided, will only return objects created after this datetime. (optional)</param>
        /// <param name="createdBefore">If provided, will only return objects created before this datetime. (optional)</param>
        /// <param name="cursor">The pagination cursor value. (optional)</param>
        /// <param name="endedAfter">If provided, will only return payroll runs ended after this datetime. (optional)</param>
        /// <param name="endedBefore">If provided, will only return payroll runs ended before this datetime. (optional)</param>
        /// <param name="includeDeletedData">Whether to include data that was marked as deleted by third party webhooks. (optional)</param>
        /// <param name="includeRemoteData">Whether to include the original data Merge fetched from the third-party to produce these models. (optional)</param>
        /// <param name="modifiedAfter">If provided, only objects synced by Merge after this date time will be returned. (optional)</param>
        /// <param name="modifiedBefore">If provided, only objects synced by Merge before this date time will be returned. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="remoteFields">Deprecated. Use show_enum_origins. (optional)</param>
        /// <param name="remoteId">The API provider&#39;s ID for the given object. (optional)</param>
        /// <param name="runType">If provided, will only return PayrollRun&#39;s with this status. Options: (&#39;REGULAR&#39;, &#39;OFF_CYCLE&#39;, &#39;CORRECTION&#39;, &#39;TERMINATION&#39;, &#39;SIGN_ON_BONUS&#39;)  * &#x60;REGULAR&#x60; - REGULAR * &#x60;OFF_CYCLE&#x60; - OFF_CYCLE * &#x60;CORRECTION&#x60; - CORRECTION * &#x60;TERMINATION&#x60; - TERMINATION * &#x60;SIGN_ON_BONUS&#x60; - SIGN_ON_BONUS (optional)</param>
        /// <param name="showEnumOrigins">Which fields should be returned in non-normalized form. (optional)</param>
        /// <param name="startedAfter">If provided, will only return payroll runs started after this datetime. (optional)</param>
        /// <param name="startedBefore">If provided, will only return payroll runs started before this datetime. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PaginatedPayrollRunList</returns>
        System.Threading.Tasks.Task<PaginatedPayrollRunList> PayrollRunsListAsync(string xAccountToken, DateTime? createdAfter = default(DateTime?), DateTime? createdBefore = default(DateTime?), string cursor = default(string), DateTime? endedAfter = default(DateTime?), DateTime? endedBefore = default(DateTime?), bool? includeDeletedData = default(bool?), bool? includeRemoteData = default(bool?), DateTime? modifiedAfter = default(DateTime?), DateTime? modifiedBefore = default(DateTime?), int? pageSize = default(int?), string remoteFields = default(string), string remoteId = default(string), string runType = default(string), string showEnumOrigins = default(string), DateTime? startedAfter = default(DateTime?), DateTime? startedBefore = default(DateTime?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of &#x60;PayrollRun&#x60; objects.
        /// </remarks>
        /// <exception cref="Merge.HRISClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccountToken">Token identifying the end user.</param>
        /// <param name="createdAfter">If provided, will only return objects created after this datetime. (optional)</param>
        /// <param name="createdBefore">If provided, will only return objects created before this datetime. (optional)</param>
        /// <param name="cursor">The pagination cursor value. (optional)</param>
        /// <param name="endedAfter">If provided, will only return payroll runs ended after this datetime. (optional)</param>
        /// <param name="endedBefore">If provided, will only return payroll runs ended before this datetime. (optional)</param>
        /// <param name="includeDeletedData">Whether to include data that was marked as deleted by third party webhooks. (optional)</param>
        /// <param name="includeRemoteData">Whether to include the original data Merge fetched from the third-party to produce these models. (optional)</param>
        /// <param name="modifiedAfter">If provided, only objects synced by Merge after this date time will be returned. (optional)</param>
        /// <param name="modifiedBefore">If provided, only objects synced by Merge before this date time will be returned. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="remoteFields">Deprecated. Use show_enum_origins. (optional)</param>
        /// <param name="remoteId">The API provider&#39;s ID for the given object. (optional)</param>
        /// <param name="runType">If provided, will only return PayrollRun&#39;s with this status. Options: (&#39;REGULAR&#39;, &#39;OFF_CYCLE&#39;, &#39;CORRECTION&#39;, &#39;TERMINATION&#39;, &#39;SIGN_ON_BONUS&#39;)  * &#x60;REGULAR&#x60; - REGULAR * &#x60;OFF_CYCLE&#x60; - OFF_CYCLE * &#x60;CORRECTION&#x60; - CORRECTION * &#x60;TERMINATION&#x60; - TERMINATION * &#x60;SIGN_ON_BONUS&#x60; - SIGN_ON_BONUS (optional)</param>
        /// <param name="showEnumOrigins">Which fields should be returned in non-normalized form. (optional)</param>
        /// <param name="startedAfter">If provided, will only return payroll runs started after this datetime. (optional)</param>
        /// <param name="startedBefore">If provided, will only return payroll runs started before this datetime. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PaginatedPayrollRunList)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaginatedPayrollRunList>> PayrollRunsListWithHttpInfoAsync(string xAccountToken, DateTime? createdAfter = default(DateTime?), DateTime? createdBefore = default(DateTime?), string cursor = default(string), DateTime? endedAfter = default(DateTime?), DateTime? endedBefore = default(DateTime?), bool? includeDeletedData = default(bool?), bool? includeRemoteData = default(bool?), DateTime? modifiedAfter = default(DateTime?), DateTime? modifiedBefore = default(DateTime?), int? pageSize = default(int?), string remoteFields = default(string), string remoteId = default(string), string runType = default(string), string showEnumOrigins = default(string), DateTime? startedAfter = default(DateTime?), DateTime? startedBefore = default(DateTime?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a &#x60;PayrollRun&#x60; object with the given &#x60;id&#x60;.
        /// </remarks>
        /// <exception cref="Merge.HRISClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccountToken">Token identifying the end user.</param>
        /// <param name="id"></param>
        /// <param name="includeRemoteData">Whether to include the original data Merge fetched from the third-party to produce these models. (optional)</param>
        /// <param name="remoteFields">Deprecated. Use show_enum_origins. (optional)</param>
        /// <param name="showEnumOrigins">Which fields should be returned in non-normalized form. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PayrollRun</returns>
        System.Threading.Tasks.Task<PayrollRun> PayrollRunsRetrieveAsync(string xAccountToken, Guid id, bool? includeRemoteData = default(bool?), string remoteFields = default(string), string showEnumOrigins = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a &#x60;PayrollRun&#x60; object with the given &#x60;id&#x60;.
        /// </remarks>
        /// <exception cref="Merge.HRISClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccountToken">Token identifying the end user.</param>
        /// <param name="id"></param>
        /// <param name="includeRemoteData">Whether to include the original data Merge fetched from the third-party to produce these models. (optional)</param>
        /// <param name="remoteFields">Deprecated. Use show_enum_origins. (optional)</param>
        /// <param name="showEnumOrigins">Which fields should be returned in non-normalized form. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PayrollRun)</returns>
        System.Threading.Tasks.Task<ApiResponse<PayrollRun>> PayrollRunsRetrieveWithHttpInfoAsync(string xAccountToken, Guid id, bool? includeRemoteData = default(bool?), string remoteFields = default(string), string showEnumOrigins = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPayrollRunsApi : IPayrollRunsApiSync, IPayrollRunsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PayrollRunsApi : IPayrollRunsApi
    {
        private Merge.HRISClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PayrollRunsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PayrollRunsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PayrollRunsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PayrollRunsApi(String basePath)
        {
            this.Configuration = Merge.HRISClient.Client.Configuration.MergeConfigurations(
                Merge.HRISClient.Client.GlobalConfiguration.Instance,
                new Merge.HRISClient.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Merge.HRISClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Merge.HRISClient.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Merge.HRISClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PayrollRunsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PayrollRunsApi(Merge.HRISClient.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Merge.HRISClient.Client.Configuration.MergeConfigurations(
                Merge.HRISClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Merge.HRISClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Merge.HRISClient.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Merge.HRISClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PayrollRunsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public PayrollRunsApi(Merge.HRISClient.Client.ISynchronousClient client, Merge.HRISClient.Client.IAsynchronousClient asyncClient, Merge.HRISClient.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Merge.HRISClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Merge.HRISClient.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Merge.HRISClient.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Merge.HRISClient.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Merge.HRISClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  Returns a list of &#x60;PayrollRun&#x60; objects.
        /// </summary>
        /// <exception cref="Merge.HRISClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccountToken">Token identifying the end user.</param>
        /// <param name="createdAfter">If provided, will only return objects created after this datetime. (optional)</param>
        /// <param name="createdBefore">If provided, will only return objects created before this datetime. (optional)</param>
        /// <param name="cursor">The pagination cursor value. (optional)</param>
        /// <param name="endedAfter">If provided, will only return payroll runs ended after this datetime. (optional)</param>
        /// <param name="endedBefore">If provided, will only return payroll runs ended before this datetime. (optional)</param>
        /// <param name="includeDeletedData">Whether to include data that was marked as deleted by third party webhooks. (optional)</param>
        /// <param name="includeRemoteData">Whether to include the original data Merge fetched from the third-party to produce these models. (optional)</param>
        /// <param name="modifiedAfter">If provided, only objects synced by Merge after this date time will be returned. (optional)</param>
        /// <param name="modifiedBefore">If provided, only objects synced by Merge before this date time will be returned. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="remoteFields">Deprecated. Use show_enum_origins. (optional)</param>
        /// <param name="remoteId">The API provider&#39;s ID for the given object. (optional)</param>
        /// <param name="runType">If provided, will only return PayrollRun&#39;s with this status. Options: (&#39;REGULAR&#39;, &#39;OFF_CYCLE&#39;, &#39;CORRECTION&#39;, &#39;TERMINATION&#39;, &#39;SIGN_ON_BONUS&#39;)  * &#x60;REGULAR&#x60; - REGULAR * &#x60;OFF_CYCLE&#x60; - OFF_CYCLE * &#x60;CORRECTION&#x60; - CORRECTION * &#x60;TERMINATION&#x60; - TERMINATION * &#x60;SIGN_ON_BONUS&#x60; - SIGN_ON_BONUS (optional)</param>
        /// <param name="showEnumOrigins">Which fields should be returned in non-normalized form. (optional)</param>
        /// <param name="startedAfter">If provided, will only return payroll runs started after this datetime. (optional)</param>
        /// <param name="startedBefore">If provided, will only return payroll runs started before this datetime. (optional)</param>
        /// <returns>PaginatedPayrollRunList</returns>
        public PaginatedPayrollRunList PayrollRunsList(string xAccountToken, DateTime? createdAfter = default(DateTime?), DateTime? createdBefore = default(DateTime?), string cursor = default(string), DateTime? endedAfter = default(DateTime?), DateTime? endedBefore = default(DateTime?), bool? includeDeletedData = default(bool?), bool? includeRemoteData = default(bool?), DateTime? modifiedAfter = default(DateTime?), DateTime? modifiedBefore = default(DateTime?), int? pageSize = default(int?), string remoteFields = default(string), string remoteId = default(string), string runType = default(string), string showEnumOrigins = default(string), DateTime? startedAfter = default(DateTime?), DateTime? startedBefore = default(DateTime?))
        {
            Merge.HRISClient.Client.ApiResponse<PaginatedPayrollRunList> localVarResponse = PayrollRunsListWithHttpInfo(xAccountToken, createdAfter, createdBefore, cursor, endedAfter, endedBefore, includeDeletedData, includeRemoteData, modifiedAfter, modifiedBefore, pageSize, remoteFields, remoteId, runType, showEnumOrigins, startedAfter, startedBefore);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of &#x60;PayrollRun&#x60; objects.
        /// </summary>
        /// <exception cref="Merge.HRISClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccountToken">Token identifying the end user.</param>
        /// <param name="createdAfter">If provided, will only return objects created after this datetime. (optional)</param>
        /// <param name="createdBefore">If provided, will only return objects created before this datetime. (optional)</param>
        /// <param name="cursor">The pagination cursor value. (optional)</param>
        /// <param name="endedAfter">If provided, will only return payroll runs ended after this datetime. (optional)</param>
        /// <param name="endedBefore">If provided, will only return payroll runs ended before this datetime. (optional)</param>
        /// <param name="includeDeletedData">Whether to include data that was marked as deleted by third party webhooks. (optional)</param>
        /// <param name="includeRemoteData">Whether to include the original data Merge fetched from the third-party to produce these models. (optional)</param>
        /// <param name="modifiedAfter">If provided, only objects synced by Merge after this date time will be returned. (optional)</param>
        /// <param name="modifiedBefore">If provided, only objects synced by Merge before this date time will be returned. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="remoteFields">Deprecated. Use show_enum_origins. (optional)</param>
        /// <param name="remoteId">The API provider&#39;s ID for the given object. (optional)</param>
        /// <param name="runType">If provided, will only return PayrollRun&#39;s with this status. Options: (&#39;REGULAR&#39;, &#39;OFF_CYCLE&#39;, &#39;CORRECTION&#39;, &#39;TERMINATION&#39;, &#39;SIGN_ON_BONUS&#39;)  * &#x60;REGULAR&#x60; - REGULAR * &#x60;OFF_CYCLE&#x60; - OFF_CYCLE * &#x60;CORRECTION&#x60; - CORRECTION * &#x60;TERMINATION&#x60; - TERMINATION * &#x60;SIGN_ON_BONUS&#x60; - SIGN_ON_BONUS (optional)</param>
        /// <param name="showEnumOrigins">Which fields should be returned in non-normalized form. (optional)</param>
        /// <param name="startedAfter">If provided, will only return payroll runs started after this datetime. (optional)</param>
        /// <param name="startedBefore">If provided, will only return payroll runs started before this datetime. (optional)</param>
        /// <returns>ApiResponse of PaginatedPayrollRunList</returns>
        public Merge.HRISClient.Client.ApiResponse<PaginatedPayrollRunList> PayrollRunsListWithHttpInfo(string xAccountToken, DateTime? createdAfter = default(DateTime?), DateTime? createdBefore = default(DateTime?), string cursor = default(string), DateTime? endedAfter = default(DateTime?), DateTime? endedBefore = default(DateTime?), bool? includeDeletedData = default(bool?), bool? includeRemoteData = default(bool?), DateTime? modifiedAfter = default(DateTime?), DateTime? modifiedBefore = default(DateTime?), int? pageSize = default(int?), string remoteFields = default(string), string remoteId = default(string), string runType = default(string), string showEnumOrigins = default(string), DateTime? startedAfter = default(DateTime?), DateTime? startedBefore = default(DateTime?))
        {
            // verify the required parameter 'xAccountToken' is set
            if (xAccountToken == null)
                throw new Merge.HRISClient.Client.ApiException(400, "Missing required parameter 'xAccountToken' when calling PayrollRunsApi->PayrollRunsList");

            Merge.HRISClient.Client.RequestOptions localVarRequestOptions = new Merge.HRISClient.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Merge.HRISClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Merge.HRISClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (createdAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Merge.HRISClient.Client.ClientUtils.ParameterToMultiMap("", "created_after", createdAfter));
            }
            if (createdBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(Merge.HRISClient.Client.ClientUtils.ParameterToMultiMap("", "created_before", createdBefore));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Merge.HRISClient.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }
            if (endedAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Merge.HRISClient.Client.ClientUtils.ParameterToMultiMap("", "ended_after", endedAfter));
            }
            if (endedBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(Merge.HRISClient.Client.ClientUtils.ParameterToMultiMap("", "ended_before", endedBefore));
            }
            if (includeDeletedData != null)
            {
                localVarRequestOptions.QueryParameters.Add(Merge.HRISClient.Client.ClientUtils.ParameterToMultiMap("", "include_deleted_data", includeDeletedData));
            }
            if (includeRemoteData != null)
            {
                localVarRequestOptions.QueryParameters.Add(Merge.HRISClient.Client.ClientUtils.ParameterToMultiMap("", "include_remote_data", includeRemoteData));
            }
            if (modifiedAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Merge.HRISClient.Client.ClientUtils.ParameterToMultiMap("", "modified_after", modifiedAfter));
            }
            if (modifiedBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(Merge.HRISClient.Client.ClientUtils.ParameterToMultiMap("", "modified_before", modifiedBefore));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Merge.HRISClient.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (remoteFields != null)
            {
                localVarRequestOptions.QueryParameters.Add(Merge.HRISClient.Client.ClientUtils.ParameterToMultiMap("", "remote_fields", remoteFields));
            }
            if (remoteId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Merge.HRISClient.Client.ClientUtils.ParameterToMultiMap("", "remote_id", remoteId));
            }
            if (runType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Merge.HRISClient.Client.ClientUtils.ParameterToMultiMap("", "run_type", runType));
            }
            if (showEnumOrigins != null)
            {
                localVarRequestOptions.QueryParameters.Add(Merge.HRISClient.Client.ClientUtils.ParameterToMultiMap("", "show_enum_origins", showEnumOrigins));
            }
            if (startedAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Merge.HRISClient.Client.ClientUtils.ParameterToMultiMap("", "started_after", startedAfter));
            }
            if (startedBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(Merge.HRISClient.Client.ClientUtils.ParameterToMultiMap("", "started_before", startedBefore));
            }
            localVarRequestOptions.HeaderParameters.Add("X-Account-Token", Merge.HRISClient.Client.ClientUtils.ParameterToString(xAccountToken)); // header parameter

            // authentication (tokenAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<PaginatedPayrollRunList>("/payroll-runs", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PayrollRunsList", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns a list of &#x60;PayrollRun&#x60; objects.
        /// </summary>
        /// <exception cref="Merge.HRISClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccountToken">Token identifying the end user.</param>
        /// <param name="createdAfter">If provided, will only return objects created after this datetime. (optional)</param>
        /// <param name="createdBefore">If provided, will only return objects created before this datetime. (optional)</param>
        /// <param name="cursor">The pagination cursor value. (optional)</param>
        /// <param name="endedAfter">If provided, will only return payroll runs ended after this datetime. (optional)</param>
        /// <param name="endedBefore">If provided, will only return payroll runs ended before this datetime. (optional)</param>
        /// <param name="includeDeletedData">Whether to include data that was marked as deleted by third party webhooks. (optional)</param>
        /// <param name="includeRemoteData">Whether to include the original data Merge fetched from the third-party to produce these models. (optional)</param>
        /// <param name="modifiedAfter">If provided, only objects synced by Merge after this date time will be returned. (optional)</param>
        /// <param name="modifiedBefore">If provided, only objects synced by Merge before this date time will be returned. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="remoteFields">Deprecated. Use show_enum_origins. (optional)</param>
        /// <param name="remoteId">The API provider&#39;s ID for the given object. (optional)</param>
        /// <param name="runType">If provided, will only return PayrollRun&#39;s with this status. Options: (&#39;REGULAR&#39;, &#39;OFF_CYCLE&#39;, &#39;CORRECTION&#39;, &#39;TERMINATION&#39;, &#39;SIGN_ON_BONUS&#39;)  * &#x60;REGULAR&#x60; - REGULAR * &#x60;OFF_CYCLE&#x60; - OFF_CYCLE * &#x60;CORRECTION&#x60; - CORRECTION * &#x60;TERMINATION&#x60; - TERMINATION * &#x60;SIGN_ON_BONUS&#x60; - SIGN_ON_BONUS (optional)</param>
        /// <param name="showEnumOrigins">Which fields should be returned in non-normalized form. (optional)</param>
        /// <param name="startedAfter">If provided, will only return payroll runs started after this datetime. (optional)</param>
        /// <param name="startedBefore">If provided, will only return payroll runs started before this datetime. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PaginatedPayrollRunList</returns>
        public async System.Threading.Tasks.Task<PaginatedPayrollRunList> PayrollRunsListAsync(string xAccountToken, DateTime? createdAfter = default(DateTime?), DateTime? createdBefore = default(DateTime?), string cursor = default(string), DateTime? endedAfter = default(DateTime?), DateTime? endedBefore = default(DateTime?), bool? includeDeletedData = default(bool?), bool? includeRemoteData = default(bool?), DateTime? modifiedAfter = default(DateTime?), DateTime? modifiedBefore = default(DateTime?), int? pageSize = default(int?), string remoteFields = default(string), string remoteId = default(string), string runType = default(string), string showEnumOrigins = default(string), DateTime? startedAfter = default(DateTime?), DateTime? startedBefore = default(DateTime?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Merge.HRISClient.Client.ApiResponse<PaginatedPayrollRunList> localVarResponse = await PayrollRunsListWithHttpInfoAsync(xAccountToken, createdAfter, createdBefore, cursor, endedAfter, endedBefore, includeDeletedData, includeRemoteData, modifiedAfter, modifiedBefore, pageSize, remoteFields, remoteId, runType, showEnumOrigins, startedAfter, startedBefore, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of &#x60;PayrollRun&#x60; objects.
        /// </summary>
        /// <exception cref="Merge.HRISClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccountToken">Token identifying the end user.</param>
        /// <param name="createdAfter">If provided, will only return objects created after this datetime. (optional)</param>
        /// <param name="createdBefore">If provided, will only return objects created before this datetime. (optional)</param>
        /// <param name="cursor">The pagination cursor value. (optional)</param>
        /// <param name="endedAfter">If provided, will only return payroll runs ended after this datetime. (optional)</param>
        /// <param name="endedBefore">If provided, will only return payroll runs ended before this datetime. (optional)</param>
        /// <param name="includeDeletedData">Whether to include data that was marked as deleted by third party webhooks. (optional)</param>
        /// <param name="includeRemoteData">Whether to include the original data Merge fetched from the third-party to produce these models. (optional)</param>
        /// <param name="modifiedAfter">If provided, only objects synced by Merge after this date time will be returned. (optional)</param>
        /// <param name="modifiedBefore">If provided, only objects synced by Merge before this date time will be returned. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="remoteFields">Deprecated. Use show_enum_origins. (optional)</param>
        /// <param name="remoteId">The API provider&#39;s ID for the given object. (optional)</param>
        /// <param name="runType">If provided, will only return PayrollRun&#39;s with this status. Options: (&#39;REGULAR&#39;, &#39;OFF_CYCLE&#39;, &#39;CORRECTION&#39;, &#39;TERMINATION&#39;, &#39;SIGN_ON_BONUS&#39;)  * &#x60;REGULAR&#x60; - REGULAR * &#x60;OFF_CYCLE&#x60; - OFF_CYCLE * &#x60;CORRECTION&#x60; - CORRECTION * &#x60;TERMINATION&#x60; - TERMINATION * &#x60;SIGN_ON_BONUS&#x60; - SIGN_ON_BONUS (optional)</param>
        /// <param name="showEnumOrigins">Which fields should be returned in non-normalized form. (optional)</param>
        /// <param name="startedAfter">If provided, will only return payroll runs started after this datetime. (optional)</param>
        /// <param name="startedBefore">If provided, will only return payroll runs started before this datetime. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PaginatedPayrollRunList)</returns>
        public async System.Threading.Tasks.Task<Merge.HRISClient.Client.ApiResponse<PaginatedPayrollRunList>> PayrollRunsListWithHttpInfoAsync(string xAccountToken, DateTime? createdAfter = default(DateTime?), DateTime? createdBefore = default(DateTime?), string cursor = default(string), DateTime? endedAfter = default(DateTime?), DateTime? endedBefore = default(DateTime?), bool? includeDeletedData = default(bool?), bool? includeRemoteData = default(bool?), DateTime? modifiedAfter = default(DateTime?), DateTime? modifiedBefore = default(DateTime?), int? pageSize = default(int?), string remoteFields = default(string), string remoteId = default(string), string runType = default(string), string showEnumOrigins = default(string), DateTime? startedAfter = default(DateTime?), DateTime? startedBefore = default(DateTime?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xAccountToken' is set
            if (xAccountToken == null)
                throw new Merge.HRISClient.Client.ApiException(400, "Missing required parameter 'xAccountToken' when calling PayrollRunsApi->PayrollRunsList");


            Merge.HRISClient.Client.RequestOptions localVarRequestOptions = new Merge.HRISClient.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Merge.HRISClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Merge.HRISClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (createdAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Merge.HRISClient.Client.ClientUtils.ParameterToMultiMap("", "created_after", createdAfter));
            }
            if (createdBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(Merge.HRISClient.Client.ClientUtils.ParameterToMultiMap("", "created_before", createdBefore));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Merge.HRISClient.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }
            if (endedAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Merge.HRISClient.Client.ClientUtils.ParameterToMultiMap("", "ended_after", endedAfter));
            }
            if (endedBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(Merge.HRISClient.Client.ClientUtils.ParameterToMultiMap("", "ended_before", endedBefore));
            }
            if (includeDeletedData != null)
            {
                localVarRequestOptions.QueryParameters.Add(Merge.HRISClient.Client.ClientUtils.ParameterToMultiMap("", "include_deleted_data", includeDeletedData));
            }
            if (includeRemoteData != null)
            {
                localVarRequestOptions.QueryParameters.Add(Merge.HRISClient.Client.ClientUtils.ParameterToMultiMap("", "include_remote_data", includeRemoteData));
            }
            if (modifiedAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Merge.HRISClient.Client.ClientUtils.ParameterToMultiMap("", "modified_after", modifiedAfter));
            }
            if (modifiedBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(Merge.HRISClient.Client.ClientUtils.ParameterToMultiMap("", "modified_before", modifiedBefore));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Merge.HRISClient.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (remoteFields != null)
            {
                localVarRequestOptions.QueryParameters.Add(Merge.HRISClient.Client.ClientUtils.ParameterToMultiMap("", "remote_fields", remoteFields));
            }
            if (remoteId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Merge.HRISClient.Client.ClientUtils.ParameterToMultiMap("", "remote_id", remoteId));
            }
            if (runType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Merge.HRISClient.Client.ClientUtils.ParameterToMultiMap("", "run_type", runType));
            }
            if (showEnumOrigins != null)
            {
                localVarRequestOptions.QueryParameters.Add(Merge.HRISClient.Client.ClientUtils.ParameterToMultiMap("", "show_enum_origins", showEnumOrigins));
            }
            if (startedAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Merge.HRISClient.Client.ClientUtils.ParameterToMultiMap("", "started_after", startedAfter));
            }
            if (startedBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(Merge.HRISClient.Client.ClientUtils.ParameterToMultiMap("", "started_before", startedBefore));
            }
            localVarRequestOptions.HeaderParameters.Add("X-Account-Token", Merge.HRISClient.Client.ClientUtils.ParameterToString(xAccountToken)); // header parameter

            // authentication (tokenAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<PaginatedPayrollRunList>("/payroll-runs", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PayrollRunsList", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns a &#x60;PayrollRun&#x60; object with the given &#x60;id&#x60;.
        /// </summary>
        /// <exception cref="Merge.HRISClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccountToken">Token identifying the end user.</param>
        /// <param name="id"></param>
        /// <param name="includeRemoteData">Whether to include the original data Merge fetched from the third-party to produce these models. (optional)</param>
        /// <param name="remoteFields">Deprecated. Use show_enum_origins. (optional)</param>
        /// <param name="showEnumOrigins">Which fields should be returned in non-normalized form. (optional)</param>
        /// <returns>PayrollRun</returns>
        public PayrollRun PayrollRunsRetrieve(string xAccountToken, Guid id, bool? includeRemoteData = default(bool?), string remoteFields = default(string), string showEnumOrigins = default(string))
        {
            Merge.HRISClient.Client.ApiResponse<PayrollRun> localVarResponse = PayrollRunsRetrieveWithHttpInfo(xAccountToken, id, includeRemoteData, remoteFields, showEnumOrigins);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a &#x60;PayrollRun&#x60; object with the given &#x60;id&#x60;.
        /// </summary>
        /// <exception cref="Merge.HRISClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccountToken">Token identifying the end user.</param>
        /// <param name="id"></param>
        /// <param name="includeRemoteData">Whether to include the original data Merge fetched from the third-party to produce these models. (optional)</param>
        /// <param name="remoteFields">Deprecated. Use show_enum_origins. (optional)</param>
        /// <param name="showEnumOrigins">Which fields should be returned in non-normalized form. (optional)</param>
        /// <returns>ApiResponse of PayrollRun</returns>
        public Merge.HRISClient.Client.ApiResponse<PayrollRun> PayrollRunsRetrieveWithHttpInfo(string xAccountToken, Guid id, bool? includeRemoteData = default(bool?), string remoteFields = default(string), string showEnumOrigins = default(string))
        {
            // verify the required parameter 'xAccountToken' is set
            if (xAccountToken == null)
                throw new Merge.HRISClient.Client.ApiException(400, "Missing required parameter 'xAccountToken' when calling PayrollRunsApi->PayrollRunsRetrieve");

            Merge.HRISClient.Client.RequestOptions localVarRequestOptions = new Merge.HRISClient.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Merge.HRISClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Merge.HRISClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Merge.HRISClient.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (includeRemoteData != null)
            {
                localVarRequestOptions.QueryParameters.Add(Merge.HRISClient.Client.ClientUtils.ParameterToMultiMap("", "include_remote_data", includeRemoteData));
            }
            if (remoteFields != null)
            {
                localVarRequestOptions.QueryParameters.Add(Merge.HRISClient.Client.ClientUtils.ParameterToMultiMap("", "remote_fields", remoteFields));
            }
            if (showEnumOrigins != null)
            {
                localVarRequestOptions.QueryParameters.Add(Merge.HRISClient.Client.ClientUtils.ParameterToMultiMap("", "show_enum_origins", showEnumOrigins));
            }
            localVarRequestOptions.HeaderParameters.Add("X-Account-Token", Merge.HRISClient.Client.ClientUtils.ParameterToString(xAccountToken)); // header parameter

            // authentication (tokenAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<PayrollRun>("/payroll-runs/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PayrollRunsRetrieve", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns a &#x60;PayrollRun&#x60; object with the given &#x60;id&#x60;.
        /// </summary>
        /// <exception cref="Merge.HRISClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccountToken">Token identifying the end user.</param>
        /// <param name="id"></param>
        /// <param name="includeRemoteData">Whether to include the original data Merge fetched from the third-party to produce these models. (optional)</param>
        /// <param name="remoteFields">Deprecated. Use show_enum_origins. (optional)</param>
        /// <param name="showEnumOrigins">Which fields should be returned in non-normalized form. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PayrollRun</returns>
        public async System.Threading.Tasks.Task<PayrollRun> PayrollRunsRetrieveAsync(string xAccountToken, Guid id, bool? includeRemoteData = default(bool?), string remoteFields = default(string), string showEnumOrigins = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Merge.HRISClient.Client.ApiResponse<PayrollRun> localVarResponse = await PayrollRunsRetrieveWithHttpInfoAsync(xAccountToken, id, includeRemoteData, remoteFields, showEnumOrigins, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a &#x60;PayrollRun&#x60; object with the given &#x60;id&#x60;.
        /// </summary>
        /// <exception cref="Merge.HRISClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccountToken">Token identifying the end user.</param>
        /// <param name="id"></param>
        /// <param name="includeRemoteData">Whether to include the original data Merge fetched from the third-party to produce these models. (optional)</param>
        /// <param name="remoteFields">Deprecated. Use show_enum_origins. (optional)</param>
        /// <param name="showEnumOrigins">Which fields should be returned in non-normalized form. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PayrollRun)</returns>
        public async System.Threading.Tasks.Task<Merge.HRISClient.Client.ApiResponse<PayrollRun>> PayrollRunsRetrieveWithHttpInfoAsync(string xAccountToken, Guid id, bool? includeRemoteData = default(bool?), string remoteFields = default(string), string showEnumOrigins = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xAccountToken' is set
            if (xAccountToken == null)
                throw new Merge.HRISClient.Client.ApiException(400, "Missing required parameter 'xAccountToken' when calling PayrollRunsApi->PayrollRunsRetrieve");


            Merge.HRISClient.Client.RequestOptions localVarRequestOptions = new Merge.HRISClient.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Merge.HRISClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Merge.HRISClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Merge.HRISClient.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (includeRemoteData != null)
            {
                localVarRequestOptions.QueryParameters.Add(Merge.HRISClient.Client.ClientUtils.ParameterToMultiMap("", "include_remote_data", includeRemoteData));
            }
            if (remoteFields != null)
            {
                localVarRequestOptions.QueryParameters.Add(Merge.HRISClient.Client.ClientUtils.ParameterToMultiMap("", "remote_fields", remoteFields));
            }
            if (showEnumOrigins != null)
            {
                localVarRequestOptions.QueryParameters.Add(Merge.HRISClient.Client.ClientUtils.ParameterToMultiMap("", "show_enum_origins", showEnumOrigins));
            }
            localVarRequestOptions.HeaderParameters.Add("X-Account-Token", Merge.HRISClient.Client.ClientUtils.ParameterToString(xAccountToken)); // header parameter

            // authentication (tokenAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<PayrollRun>("/payroll-runs/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PayrollRunsRetrieve", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
