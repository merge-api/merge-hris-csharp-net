/*
 * Merge HRIS API
 *
 * The unified API for building rich integrations with multiple HR Information System platforms.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hello@merge.dev
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Merge.HRISClient.Client;
using Merge.HRISClient.Model;

namespace Merge.HRISClient.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITimeOffApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a &#x60;TimeOff&#x60; object with the given values.
        /// </remarks>
        /// <exception cref="Merge.HRISClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccountToken">Token identifying the end user.</param>
        /// <param name="timeOffEndpointRequest"></param>
        /// <param name="isDebugMode">Whether to include debug fields (such as log file links) in the response. (optional)</param>
        /// <param name="runAsync">Whether or not third-party updates should be run asynchronously. (optional)</param>
        /// <returns>TimeOffResponse</returns>
        TimeOffResponse TimeOffCreate(string xAccountToken, TimeOffEndpointRequest timeOffEndpointRequest, bool? isDebugMode = default(bool?), bool? runAsync = default(bool?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a &#x60;TimeOff&#x60; object with the given values.
        /// </remarks>
        /// <exception cref="Merge.HRISClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccountToken">Token identifying the end user.</param>
        /// <param name="timeOffEndpointRequest"></param>
        /// <param name="isDebugMode">Whether to include debug fields (such as log file links) in the response. (optional)</param>
        /// <param name="runAsync">Whether or not third-party updates should be run asynchronously. (optional)</param>
        /// <returns>ApiResponse of TimeOffResponse</returns>
        ApiResponse<TimeOffResponse> TimeOffCreateWithHttpInfo(string xAccountToken, TimeOffEndpointRequest timeOffEndpointRequest, bool? isDebugMode = default(bool?), bool? runAsync = default(bool?));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of &#x60;TimeOff&#x60; objects.
        /// </remarks>
        /// <exception cref="Merge.HRISClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccountToken">Token identifying the end user.</param>
        /// <param name="approverId">If provided, will only return time off for this approver. (optional)</param>
        /// <param name="createdAfter">If provided, will only return objects created after this datetime. (optional)</param>
        /// <param name="createdBefore">If provided, will only return objects created before this datetime. (optional)</param>
        /// <param name="cursor">The pagination cursor value. (optional)</param>
        /// <param name="employeeId">If provided, will only return time off for this employee. (optional)</param>
        /// <param name="includeDeletedData">Whether to include data that was marked as deleted by third party webhooks. (optional)</param>
        /// <param name="includeRemoteData">Whether to include the original data Merge fetched from the third-party to produce these models. (optional)</param>
        /// <param name="modifiedAfter">If provided, will only return objects modified after this datetime. (optional)</param>
        /// <param name="modifiedBefore">If provided, will only return objects modified before this datetime. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="remoteFields">Which fields should be returned in non-normalized form. (optional)</param>
        /// <param name="remoteId">The API provider&#39;s ID for the given object. (optional)</param>
        /// <param name="requestType">If provided, will only return TimeOff with this request type. Options: (&#39;VACATION&#39;, &#39;SICK&#39;, &#39;PERSONAL&#39;, &#39;JURY_DUTY&#39;, &#39;VOLUNTEER&#39;, &#39;BEREAVEMENT&#39;) (optional)</param>
        /// <param name="status">If provided, will only return TimeOff with this status. Options: (&#39;REQUESTED&#39;, &#39;APPROVED&#39;, &#39;DECLINED&#39;, &#39;CANCELLED&#39;, &#39;DELETED&#39;) (optional)</param>
        /// <returns>PaginatedTimeOffList</returns>
        PaginatedTimeOffList TimeOffList(string xAccountToken, string approverId = default(string), DateTime? createdAfter = default(DateTime?), DateTime? createdBefore = default(DateTime?), string cursor = default(string), string employeeId = default(string), bool? includeDeletedData = default(bool?), bool? includeRemoteData = default(bool?), DateTime? modifiedAfter = default(DateTime?), DateTime? modifiedBefore = default(DateTime?), int? pageSize = default(int?), string remoteFields = default(string), string remoteId = default(string), string requestType = default(string), string status = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of &#x60;TimeOff&#x60; objects.
        /// </remarks>
        /// <exception cref="Merge.HRISClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccountToken">Token identifying the end user.</param>
        /// <param name="approverId">If provided, will only return time off for this approver. (optional)</param>
        /// <param name="createdAfter">If provided, will only return objects created after this datetime. (optional)</param>
        /// <param name="createdBefore">If provided, will only return objects created before this datetime. (optional)</param>
        /// <param name="cursor">The pagination cursor value. (optional)</param>
        /// <param name="employeeId">If provided, will only return time off for this employee. (optional)</param>
        /// <param name="includeDeletedData">Whether to include data that was marked as deleted by third party webhooks. (optional)</param>
        /// <param name="includeRemoteData">Whether to include the original data Merge fetched from the third-party to produce these models. (optional)</param>
        /// <param name="modifiedAfter">If provided, will only return objects modified after this datetime. (optional)</param>
        /// <param name="modifiedBefore">If provided, will only return objects modified before this datetime. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="remoteFields">Which fields should be returned in non-normalized form. (optional)</param>
        /// <param name="remoteId">The API provider&#39;s ID for the given object. (optional)</param>
        /// <param name="requestType">If provided, will only return TimeOff with this request type. Options: (&#39;VACATION&#39;, &#39;SICK&#39;, &#39;PERSONAL&#39;, &#39;JURY_DUTY&#39;, &#39;VOLUNTEER&#39;, &#39;BEREAVEMENT&#39;) (optional)</param>
        /// <param name="status">If provided, will only return TimeOff with this status. Options: (&#39;REQUESTED&#39;, &#39;APPROVED&#39;, &#39;DECLINED&#39;, &#39;CANCELLED&#39;, &#39;DELETED&#39;) (optional)</param>
        /// <returns>ApiResponse of PaginatedTimeOffList</returns>
        ApiResponse<PaginatedTimeOffList> TimeOffListWithHttpInfo(string xAccountToken, string approverId = default(string), DateTime? createdAfter = default(DateTime?), DateTime? createdBefore = default(DateTime?), string cursor = default(string), string employeeId = default(string), bool? includeDeletedData = default(bool?), bool? includeRemoteData = default(bool?), DateTime? modifiedAfter = default(DateTime?), DateTime? modifiedBefore = default(DateTime?), int? pageSize = default(int?), string remoteFields = default(string), string remoteId = default(string), string requestType = default(string), string status = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns metadata for &#x60;TimeOff&#x60; POSTs.
        /// </remarks>
        /// <exception cref="Merge.HRISClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccountToken">Token identifying the end user.</param>
        /// <returns>MetaResponse</returns>
        MetaResponse TimeOffMetaPostRetrieve(string xAccountToken);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns metadata for &#x60;TimeOff&#x60; POSTs.
        /// </remarks>
        /// <exception cref="Merge.HRISClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccountToken">Token identifying the end user.</param>
        /// <returns>ApiResponse of MetaResponse</returns>
        ApiResponse<MetaResponse> TimeOffMetaPostRetrieveWithHttpInfo(string xAccountToken);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a &#x60;TimeOff&#x60; object with the given &#x60;id&#x60;.
        /// </remarks>
        /// <exception cref="Merge.HRISClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccountToken">Token identifying the end user.</param>
        /// <param name="id"></param>
        /// <param name="includeRemoteData">Whether to include the original data Merge fetched from the third-party to produce these models. (optional)</param>
        /// <param name="remoteFields">Which fields should be returned in non-normalized form. (optional)</param>
        /// <returns>TimeOff</returns>
        TimeOff TimeOffRetrieve(string xAccountToken, Guid id, bool? includeRemoteData = default(bool?), string remoteFields = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a &#x60;TimeOff&#x60; object with the given &#x60;id&#x60;.
        /// </remarks>
        /// <exception cref="Merge.HRISClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccountToken">Token identifying the end user.</param>
        /// <param name="id"></param>
        /// <param name="includeRemoteData">Whether to include the original data Merge fetched from the third-party to produce these models. (optional)</param>
        /// <param name="remoteFields">Which fields should be returned in non-normalized form. (optional)</param>
        /// <returns>ApiResponse of TimeOff</returns>
        ApiResponse<TimeOff> TimeOffRetrieveWithHttpInfo(string xAccountToken, Guid id, bool? includeRemoteData = default(bool?), string remoteFields = default(string));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITimeOffApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a &#x60;TimeOff&#x60; object with the given values.
        /// </remarks>
        /// <exception cref="Merge.HRISClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccountToken">Token identifying the end user.</param>
        /// <param name="timeOffEndpointRequest"></param>
        /// <param name="isDebugMode">Whether to include debug fields (such as log file links) in the response. (optional)</param>
        /// <param name="runAsync">Whether or not third-party updates should be run asynchronously. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TimeOffResponse</returns>
        System.Threading.Tasks.Task<TimeOffResponse> TimeOffCreateAsync(string xAccountToken, TimeOffEndpointRequest timeOffEndpointRequest, bool? isDebugMode = default(bool?), bool? runAsync = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a &#x60;TimeOff&#x60; object with the given values.
        /// </remarks>
        /// <exception cref="Merge.HRISClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccountToken">Token identifying the end user.</param>
        /// <param name="timeOffEndpointRequest"></param>
        /// <param name="isDebugMode">Whether to include debug fields (such as log file links) in the response. (optional)</param>
        /// <param name="runAsync">Whether or not third-party updates should be run asynchronously. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TimeOffResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TimeOffResponse>> TimeOffCreateWithHttpInfoAsync(string xAccountToken, TimeOffEndpointRequest timeOffEndpointRequest, bool? isDebugMode = default(bool?), bool? runAsync = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of &#x60;TimeOff&#x60; objects.
        /// </remarks>
        /// <exception cref="Merge.HRISClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccountToken">Token identifying the end user.</param>
        /// <param name="approverId">If provided, will only return time off for this approver. (optional)</param>
        /// <param name="createdAfter">If provided, will only return objects created after this datetime. (optional)</param>
        /// <param name="createdBefore">If provided, will only return objects created before this datetime. (optional)</param>
        /// <param name="cursor">The pagination cursor value. (optional)</param>
        /// <param name="employeeId">If provided, will only return time off for this employee. (optional)</param>
        /// <param name="includeDeletedData">Whether to include data that was marked as deleted by third party webhooks. (optional)</param>
        /// <param name="includeRemoteData">Whether to include the original data Merge fetched from the third-party to produce these models. (optional)</param>
        /// <param name="modifiedAfter">If provided, will only return objects modified after this datetime. (optional)</param>
        /// <param name="modifiedBefore">If provided, will only return objects modified before this datetime. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="remoteFields">Which fields should be returned in non-normalized form. (optional)</param>
        /// <param name="remoteId">The API provider&#39;s ID for the given object. (optional)</param>
        /// <param name="requestType">If provided, will only return TimeOff with this request type. Options: (&#39;VACATION&#39;, &#39;SICK&#39;, &#39;PERSONAL&#39;, &#39;JURY_DUTY&#39;, &#39;VOLUNTEER&#39;, &#39;BEREAVEMENT&#39;) (optional)</param>
        /// <param name="status">If provided, will only return TimeOff with this status. Options: (&#39;REQUESTED&#39;, &#39;APPROVED&#39;, &#39;DECLINED&#39;, &#39;CANCELLED&#39;, &#39;DELETED&#39;) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PaginatedTimeOffList</returns>
        System.Threading.Tasks.Task<PaginatedTimeOffList> TimeOffListAsync(string xAccountToken, string approverId = default(string), DateTime? createdAfter = default(DateTime?), DateTime? createdBefore = default(DateTime?), string cursor = default(string), string employeeId = default(string), bool? includeDeletedData = default(bool?), bool? includeRemoteData = default(bool?), DateTime? modifiedAfter = default(DateTime?), DateTime? modifiedBefore = default(DateTime?), int? pageSize = default(int?), string remoteFields = default(string), string remoteId = default(string), string requestType = default(string), string status = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of &#x60;TimeOff&#x60; objects.
        /// </remarks>
        /// <exception cref="Merge.HRISClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccountToken">Token identifying the end user.</param>
        /// <param name="approverId">If provided, will only return time off for this approver. (optional)</param>
        /// <param name="createdAfter">If provided, will only return objects created after this datetime. (optional)</param>
        /// <param name="createdBefore">If provided, will only return objects created before this datetime. (optional)</param>
        /// <param name="cursor">The pagination cursor value. (optional)</param>
        /// <param name="employeeId">If provided, will only return time off for this employee. (optional)</param>
        /// <param name="includeDeletedData">Whether to include data that was marked as deleted by third party webhooks. (optional)</param>
        /// <param name="includeRemoteData">Whether to include the original data Merge fetched from the third-party to produce these models. (optional)</param>
        /// <param name="modifiedAfter">If provided, will only return objects modified after this datetime. (optional)</param>
        /// <param name="modifiedBefore">If provided, will only return objects modified before this datetime. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="remoteFields">Which fields should be returned in non-normalized form. (optional)</param>
        /// <param name="remoteId">The API provider&#39;s ID for the given object. (optional)</param>
        /// <param name="requestType">If provided, will only return TimeOff with this request type. Options: (&#39;VACATION&#39;, &#39;SICK&#39;, &#39;PERSONAL&#39;, &#39;JURY_DUTY&#39;, &#39;VOLUNTEER&#39;, &#39;BEREAVEMENT&#39;) (optional)</param>
        /// <param name="status">If provided, will only return TimeOff with this status. Options: (&#39;REQUESTED&#39;, &#39;APPROVED&#39;, &#39;DECLINED&#39;, &#39;CANCELLED&#39;, &#39;DELETED&#39;) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PaginatedTimeOffList)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaginatedTimeOffList>> TimeOffListWithHttpInfoAsync(string xAccountToken, string approverId = default(string), DateTime? createdAfter = default(DateTime?), DateTime? createdBefore = default(DateTime?), string cursor = default(string), string employeeId = default(string), bool? includeDeletedData = default(bool?), bool? includeRemoteData = default(bool?), DateTime? modifiedAfter = default(DateTime?), DateTime? modifiedBefore = default(DateTime?), int? pageSize = default(int?), string remoteFields = default(string), string remoteId = default(string), string requestType = default(string), string status = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns metadata for &#x60;TimeOff&#x60; POSTs.
        /// </remarks>
        /// <exception cref="Merge.HRISClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccountToken">Token identifying the end user.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MetaResponse</returns>
        System.Threading.Tasks.Task<MetaResponse> TimeOffMetaPostRetrieveAsync(string xAccountToken, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns metadata for &#x60;TimeOff&#x60; POSTs.
        /// </remarks>
        /// <exception cref="Merge.HRISClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccountToken">Token identifying the end user.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MetaResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MetaResponse>> TimeOffMetaPostRetrieveWithHttpInfoAsync(string xAccountToken, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a &#x60;TimeOff&#x60; object with the given &#x60;id&#x60;.
        /// </remarks>
        /// <exception cref="Merge.HRISClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccountToken">Token identifying the end user.</param>
        /// <param name="id"></param>
        /// <param name="includeRemoteData">Whether to include the original data Merge fetched from the third-party to produce these models. (optional)</param>
        /// <param name="remoteFields">Which fields should be returned in non-normalized form. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TimeOff</returns>
        System.Threading.Tasks.Task<TimeOff> TimeOffRetrieveAsync(string xAccountToken, Guid id, bool? includeRemoteData = default(bool?), string remoteFields = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a &#x60;TimeOff&#x60; object with the given &#x60;id&#x60;.
        /// </remarks>
        /// <exception cref="Merge.HRISClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccountToken">Token identifying the end user.</param>
        /// <param name="id"></param>
        /// <param name="includeRemoteData">Whether to include the original data Merge fetched from the third-party to produce these models. (optional)</param>
        /// <param name="remoteFields">Which fields should be returned in non-normalized form. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TimeOff)</returns>
        System.Threading.Tasks.Task<ApiResponse<TimeOff>> TimeOffRetrieveWithHttpInfoAsync(string xAccountToken, Guid id, bool? includeRemoteData = default(bool?), string remoteFields = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITimeOffApi : ITimeOffApiSync, ITimeOffApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TimeOffApi : ITimeOffApi
    {
        private Merge.HRISClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TimeOffApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TimeOffApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TimeOffApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TimeOffApi(String basePath)
        {
            this.Configuration = Merge.HRISClient.Client.Configuration.MergeConfigurations(
                Merge.HRISClient.Client.GlobalConfiguration.Instance,
                new Merge.HRISClient.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Merge.HRISClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Merge.HRISClient.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Merge.HRISClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TimeOffApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TimeOffApi(Merge.HRISClient.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Merge.HRISClient.Client.Configuration.MergeConfigurations(
                Merge.HRISClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Merge.HRISClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Merge.HRISClient.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Merge.HRISClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TimeOffApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public TimeOffApi(Merge.HRISClient.Client.ISynchronousClient client, Merge.HRISClient.Client.IAsynchronousClient asyncClient, Merge.HRISClient.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Merge.HRISClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Merge.HRISClient.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Merge.HRISClient.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Merge.HRISClient.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Merge.HRISClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  Creates a &#x60;TimeOff&#x60; object with the given values.
        /// </summary>
        /// <exception cref="Merge.HRISClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccountToken">Token identifying the end user.</param>
        /// <param name="timeOffEndpointRequest"></param>
        /// <param name="isDebugMode">Whether to include debug fields (such as log file links) in the response. (optional)</param>
        /// <param name="runAsync">Whether or not third-party updates should be run asynchronously. (optional)</param>
        /// <returns>TimeOffResponse</returns>
        public TimeOffResponse TimeOffCreate(string xAccountToken, TimeOffEndpointRequest timeOffEndpointRequest, bool? isDebugMode = default(bool?), bool? runAsync = default(bool?))
        {
            Merge.HRISClient.Client.ApiResponse<TimeOffResponse> localVarResponse = TimeOffCreateWithHttpInfo(xAccountToken, timeOffEndpointRequest, isDebugMode, runAsync);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Creates a &#x60;TimeOff&#x60; object with the given values.
        /// </summary>
        /// <exception cref="Merge.HRISClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccountToken">Token identifying the end user.</param>
        /// <param name="timeOffEndpointRequest"></param>
        /// <param name="isDebugMode">Whether to include debug fields (such as log file links) in the response. (optional)</param>
        /// <param name="runAsync">Whether or not third-party updates should be run asynchronously. (optional)</param>
        /// <returns>ApiResponse of TimeOffResponse</returns>
        public Merge.HRISClient.Client.ApiResponse<TimeOffResponse> TimeOffCreateWithHttpInfo(string xAccountToken, TimeOffEndpointRequest timeOffEndpointRequest, bool? isDebugMode = default(bool?), bool? runAsync = default(bool?))
        {
            // verify the required parameter 'xAccountToken' is set
            if (xAccountToken == null)
                throw new Merge.HRISClient.Client.ApiException(400, "Missing required parameter 'xAccountToken' when calling TimeOffApi->TimeOffCreate");

            // verify the required parameter 'timeOffEndpointRequest' is set
            if (timeOffEndpointRequest == null)
                throw new Merge.HRISClient.Client.ApiException(400, "Missing required parameter 'timeOffEndpointRequest' when calling TimeOffApi->TimeOffCreate");

            Merge.HRISClient.Client.RequestOptions localVarRequestOptions = new Merge.HRISClient.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json",
                "application/x-www-form-urlencoded",
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Merge.HRISClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Merge.HRISClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (isDebugMode != null)
            {
                localVarRequestOptions.QueryParameters.Add(Merge.HRISClient.Client.ClientUtils.ParameterToMultiMap("", "is_debug_mode", isDebugMode));
            }
            if (runAsync != null)
            {
                localVarRequestOptions.QueryParameters.Add(Merge.HRISClient.Client.ClientUtils.ParameterToMultiMap("", "run_async", runAsync));
            }
            localVarRequestOptions.HeaderParameters.Add("X-Account-Token", Merge.HRISClient.Client.ClientUtils.ParameterToString(xAccountToken)); // header parameter
            localVarRequestOptions.Data = timeOffEndpointRequest;

            // authentication (tokenAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<TimeOffResponse>("/time-off", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TimeOffCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Creates a &#x60;TimeOff&#x60; object with the given values.
        /// </summary>
        /// <exception cref="Merge.HRISClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccountToken">Token identifying the end user.</param>
        /// <param name="timeOffEndpointRequest"></param>
        /// <param name="isDebugMode">Whether to include debug fields (such as log file links) in the response. (optional)</param>
        /// <param name="runAsync">Whether or not third-party updates should be run asynchronously. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TimeOffResponse</returns>
        public async System.Threading.Tasks.Task<TimeOffResponse> TimeOffCreateAsync(string xAccountToken, TimeOffEndpointRequest timeOffEndpointRequest, bool? isDebugMode = default(bool?), bool? runAsync = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Merge.HRISClient.Client.ApiResponse<TimeOffResponse> localVarResponse = await TimeOffCreateWithHttpInfoAsync(xAccountToken, timeOffEndpointRequest, isDebugMode, runAsync, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Creates a &#x60;TimeOff&#x60; object with the given values.
        /// </summary>
        /// <exception cref="Merge.HRISClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccountToken">Token identifying the end user.</param>
        /// <param name="timeOffEndpointRequest"></param>
        /// <param name="isDebugMode">Whether to include debug fields (such as log file links) in the response. (optional)</param>
        /// <param name="runAsync">Whether or not third-party updates should be run asynchronously. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TimeOffResponse)</returns>
        public async System.Threading.Tasks.Task<Merge.HRISClient.Client.ApiResponse<TimeOffResponse>> TimeOffCreateWithHttpInfoAsync(string xAccountToken, TimeOffEndpointRequest timeOffEndpointRequest, bool? isDebugMode = default(bool?), bool? runAsync = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xAccountToken' is set
            if (xAccountToken == null)
                throw new Merge.HRISClient.Client.ApiException(400, "Missing required parameter 'xAccountToken' when calling TimeOffApi->TimeOffCreate");

            // verify the required parameter 'timeOffEndpointRequest' is set
            if (timeOffEndpointRequest == null)
                throw new Merge.HRISClient.Client.ApiException(400, "Missing required parameter 'timeOffEndpointRequest' when calling TimeOffApi->TimeOffCreate");


            Merge.HRISClient.Client.RequestOptions localVarRequestOptions = new Merge.HRISClient.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Merge.HRISClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Merge.HRISClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (isDebugMode != null)
            {
                localVarRequestOptions.QueryParameters.Add(Merge.HRISClient.Client.ClientUtils.ParameterToMultiMap("", "is_debug_mode", isDebugMode));
            }
            if (runAsync != null)
            {
                localVarRequestOptions.QueryParameters.Add(Merge.HRISClient.Client.ClientUtils.ParameterToMultiMap("", "run_async", runAsync));
            }
            localVarRequestOptions.HeaderParameters.Add("X-Account-Token", Merge.HRISClient.Client.ClientUtils.ParameterToString(xAccountToken)); // header parameter
            localVarRequestOptions.Data = timeOffEndpointRequest;

            // authentication (tokenAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<TimeOffResponse>("/time-off", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TimeOffCreate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns a list of &#x60;TimeOff&#x60; objects.
        /// </summary>
        /// <exception cref="Merge.HRISClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccountToken">Token identifying the end user.</param>
        /// <param name="approverId">If provided, will only return time off for this approver. (optional)</param>
        /// <param name="createdAfter">If provided, will only return objects created after this datetime. (optional)</param>
        /// <param name="createdBefore">If provided, will only return objects created before this datetime. (optional)</param>
        /// <param name="cursor">The pagination cursor value. (optional)</param>
        /// <param name="employeeId">If provided, will only return time off for this employee. (optional)</param>
        /// <param name="includeDeletedData">Whether to include data that was marked as deleted by third party webhooks. (optional)</param>
        /// <param name="includeRemoteData">Whether to include the original data Merge fetched from the third-party to produce these models. (optional)</param>
        /// <param name="modifiedAfter">If provided, will only return objects modified after this datetime. (optional)</param>
        /// <param name="modifiedBefore">If provided, will only return objects modified before this datetime. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="remoteFields">Which fields should be returned in non-normalized form. (optional)</param>
        /// <param name="remoteId">The API provider&#39;s ID for the given object. (optional)</param>
        /// <param name="requestType">If provided, will only return TimeOff with this request type. Options: (&#39;VACATION&#39;, &#39;SICK&#39;, &#39;PERSONAL&#39;, &#39;JURY_DUTY&#39;, &#39;VOLUNTEER&#39;, &#39;BEREAVEMENT&#39;) (optional)</param>
        /// <param name="status">If provided, will only return TimeOff with this status. Options: (&#39;REQUESTED&#39;, &#39;APPROVED&#39;, &#39;DECLINED&#39;, &#39;CANCELLED&#39;, &#39;DELETED&#39;) (optional)</param>
        /// <returns>PaginatedTimeOffList</returns>
        public PaginatedTimeOffList TimeOffList(string xAccountToken, string approverId = default(string), DateTime? createdAfter = default(DateTime?), DateTime? createdBefore = default(DateTime?), string cursor = default(string), string employeeId = default(string), bool? includeDeletedData = default(bool?), bool? includeRemoteData = default(bool?), DateTime? modifiedAfter = default(DateTime?), DateTime? modifiedBefore = default(DateTime?), int? pageSize = default(int?), string remoteFields = default(string), string remoteId = default(string), string requestType = default(string), string status = default(string))
        {
            Merge.HRISClient.Client.ApiResponse<PaginatedTimeOffList> localVarResponse = TimeOffListWithHttpInfo(xAccountToken, approverId, createdAfter, createdBefore, cursor, employeeId, includeDeletedData, includeRemoteData, modifiedAfter, modifiedBefore, pageSize, remoteFields, remoteId, requestType, status);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of &#x60;TimeOff&#x60; objects.
        /// </summary>
        /// <exception cref="Merge.HRISClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccountToken">Token identifying the end user.</param>
        /// <param name="approverId">If provided, will only return time off for this approver. (optional)</param>
        /// <param name="createdAfter">If provided, will only return objects created after this datetime. (optional)</param>
        /// <param name="createdBefore">If provided, will only return objects created before this datetime. (optional)</param>
        /// <param name="cursor">The pagination cursor value. (optional)</param>
        /// <param name="employeeId">If provided, will only return time off for this employee. (optional)</param>
        /// <param name="includeDeletedData">Whether to include data that was marked as deleted by third party webhooks. (optional)</param>
        /// <param name="includeRemoteData">Whether to include the original data Merge fetched from the third-party to produce these models. (optional)</param>
        /// <param name="modifiedAfter">If provided, will only return objects modified after this datetime. (optional)</param>
        /// <param name="modifiedBefore">If provided, will only return objects modified before this datetime. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="remoteFields">Which fields should be returned in non-normalized form. (optional)</param>
        /// <param name="remoteId">The API provider&#39;s ID for the given object. (optional)</param>
        /// <param name="requestType">If provided, will only return TimeOff with this request type. Options: (&#39;VACATION&#39;, &#39;SICK&#39;, &#39;PERSONAL&#39;, &#39;JURY_DUTY&#39;, &#39;VOLUNTEER&#39;, &#39;BEREAVEMENT&#39;) (optional)</param>
        /// <param name="status">If provided, will only return TimeOff with this status. Options: (&#39;REQUESTED&#39;, &#39;APPROVED&#39;, &#39;DECLINED&#39;, &#39;CANCELLED&#39;, &#39;DELETED&#39;) (optional)</param>
        /// <returns>ApiResponse of PaginatedTimeOffList</returns>
        public Merge.HRISClient.Client.ApiResponse<PaginatedTimeOffList> TimeOffListWithHttpInfo(string xAccountToken, string approverId = default(string), DateTime? createdAfter = default(DateTime?), DateTime? createdBefore = default(DateTime?), string cursor = default(string), string employeeId = default(string), bool? includeDeletedData = default(bool?), bool? includeRemoteData = default(bool?), DateTime? modifiedAfter = default(DateTime?), DateTime? modifiedBefore = default(DateTime?), int? pageSize = default(int?), string remoteFields = default(string), string remoteId = default(string), string requestType = default(string), string status = default(string))
        {
            // verify the required parameter 'xAccountToken' is set
            if (xAccountToken == null)
                throw new Merge.HRISClient.Client.ApiException(400, "Missing required parameter 'xAccountToken' when calling TimeOffApi->TimeOffList");

            Merge.HRISClient.Client.RequestOptions localVarRequestOptions = new Merge.HRISClient.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Merge.HRISClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Merge.HRISClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (approverId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Merge.HRISClient.Client.ClientUtils.ParameterToMultiMap("", "approver_id", approverId));
            }
            if (createdAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Merge.HRISClient.Client.ClientUtils.ParameterToMultiMap("", "created_after", createdAfter));
            }
            if (createdBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(Merge.HRISClient.Client.ClientUtils.ParameterToMultiMap("", "created_before", createdBefore));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Merge.HRISClient.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }
            if (employeeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Merge.HRISClient.Client.ClientUtils.ParameterToMultiMap("", "employee_id", employeeId));
            }
            if (includeDeletedData != null)
            {
                localVarRequestOptions.QueryParameters.Add(Merge.HRISClient.Client.ClientUtils.ParameterToMultiMap("", "include_deleted_data", includeDeletedData));
            }
            if (includeRemoteData != null)
            {
                localVarRequestOptions.QueryParameters.Add(Merge.HRISClient.Client.ClientUtils.ParameterToMultiMap("", "include_remote_data", includeRemoteData));
            }
            if (modifiedAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Merge.HRISClient.Client.ClientUtils.ParameterToMultiMap("", "modified_after", modifiedAfter));
            }
            if (modifiedBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(Merge.HRISClient.Client.ClientUtils.ParameterToMultiMap("", "modified_before", modifiedBefore));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Merge.HRISClient.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (remoteFields != null)
            {
                localVarRequestOptions.QueryParameters.Add(Merge.HRISClient.Client.ClientUtils.ParameterToMultiMap("", "remote_fields", remoteFields));
            }
            if (remoteId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Merge.HRISClient.Client.ClientUtils.ParameterToMultiMap("", "remote_id", remoteId));
            }
            if (requestType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Merge.HRISClient.Client.ClientUtils.ParameterToMultiMap("", "request_type", requestType));
            }
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(Merge.HRISClient.Client.ClientUtils.ParameterToMultiMap("", "status", status));
            }
            localVarRequestOptions.HeaderParameters.Add("X-Account-Token", Merge.HRISClient.Client.ClientUtils.ParameterToString(xAccountToken)); // header parameter

            // authentication (tokenAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<PaginatedTimeOffList>("/time-off", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TimeOffList", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns a list of &#x60;TimeOff&#x60; objects.
        /// </summary>
        /// <exception cref="Merge.HRISClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccountToken">Token identifying the end user.</param>
        /// <param name="approverId">If provided, will only return time off for this approver. (optional)</param>
        /// <param name="createdAfter">If provided, will only return objects created after this datetime. (optional)</param>
        /// <param name="createdBefore">If provided, will only return objects created before this datetime. (optional)</param>
        /// <param name="cursor">The pagination cursor value. (optional)</param>
        /// <param name="employeeId">If provided, will only return time off for this employee. (optional)</param>
        /// <param name="includeDeletedData">Whether to include data that was marked as deleted by third party webhooks. (optional)</param>
        /// <param name="includeRemoteData">Whether to include the original data Merge fetched from the third-party to produce these models. (optional)</param>
        /// <param name="modifiedAfter">If provided, will only return objects modified after this datetime. (optional)</param>
        /// <param name="modifiedBefore">If provided, will only return objects modified before this datetime. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="remoteFields">Which fields should be returned in non-normalized form. (optional)</param>
        /// <param name="remoteId">The API provider&#39;s ID for the given object. (optional)</param>
        /// <param name="requestType">If provided, will only return TimeOff with this request type. Options: (&#39;VACATION&#39;, &#39;SICK&#39;, &#39;PERSONAL&#39;, &#39;JURY_DUTY&#39;, &#39;VOLUNTEER&#39;, &#39;BEREAVEMENT&#39;) (optional)</param>
        /// <param name="status">If provided, will only return TimeOff with this status. Options: (&#39;REQUESTED&#39;, &#39;APPROVED&#39;, &#39;DECLINED&#39;, &#39;CANCELLED&#39;, &#39;DELETED&#39;) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PaginatedTimeOffList</returns>
        public async System.Threading.Tasks.Task<PaginatedTimeOffList> TimeOffListAsync(string xAccountToken, string approverId = default(string), DateTime? createdAfter = default(DateTime?), DateTime? createdBefore = default(DateTime?), string cursor = default(string), string employeeId = default(string), bool? includeDeletedData = default(bool?), bool? includeRemoteData = default(bool?), DateTime? modifiedAfter = default(DateTime?), DateTime? modifiedBefore = default(DateTime?), int? pageSize = default(int?), string remoteFields = default(string), string remoteId = default(string), string requestType = default(string), string status = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Merge.HRISClient.Client.ApiResponse<PaginatedTimeOffList> localVarResponse = await TimeOffListWithHttpInfoAsync(xAccountToken, approverId, createdAfter, createdBefore, cursor, employeeId, includeDeletedData, includeRemoteData, modifiedAfter, modifiedBefore, pageSize, remoteFields, remoteId, requestType, status, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of &#x60;TimeOff&#x60; objects.
        /// </summary>
        /// <exception cref="Merge.HRISClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccountToken">Token identifying the end user.</param>
        /// <param name="approverId">If provided, will only return time off for this approver. (optional)</param>
        /// <param name="createdAfter">If provided, will only return objects created after this datetime. (optional)</param>
        /// <param name="createdBefore">If provided, will only return objects created before this datetime. (optional)</param>
        /// <param name="cursor">The pagination cursor value. (optional)</param>
        /// <param name="employeeId">If provided, will only return time off for this employee. (optional)</param>
        /// <param name="includeDeletedData">Whether to include data that was marked as deleted by third party webhooks. (optional)</param>
        /// <param name="includeRemoteData">Whether to include the original data Merge fetched from the third-party to produce these models. (optional)</param>
        /// <param name="modifiedAfter">If provided, will only return objects modified after this datetime. (optional)</param>
        /// <param name="modifiedBefore">If provided, will only return objects modified before this datetime. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="remoteFields">Which fields should be returned in non-normalized form. (optional)</param>
        /// <param name="remoteId">The API provider&#39;s ID for the given object. (optional)</param>
        /// <param name="requestType">If provided, will only return TimeOff with this request type. Options: (&#39;VACATION&#39;, &#39;SICK&#39;, &#39;PERSONAL&#39;, &#39;JURY_DUTY&#39;, &#39;VOLUNTEER&#39;, &#39;BEREAVEMENT&#39;) (optional)</param>
        /// <param name="status">If provided, will only return TimeOff with this status. Options: (&#39;REQUESTED&#39;, &#39;APPROVED&#39;, &#39;DECLINED&#39;, &#39;CANCELLED&#39;, &#39;DELETED&#39;) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PaginatedTimeOffList)</returns>
        public async System.Threading.Tasks.Task<Merge.HRISClient.Client.ApiResponse<PaginatedTimeOffList>> TimeOffListWithHttpInfoAsync(string xAccountToken, string approverId = default(string), DateTime? createdAfter = default(DateTime?), DateTime? createdBefore = default(DateTime?), string cursor = default(string), string employeeId = default(string), bool? includeDeletedData = default(bool?), bool? includeRemoteData = default(bool?), DateTime? modifiedAfter = default(DateTime?), DateTime? modifiedBefore = default(DateTime?), int? pageSize = default(int?), string remoteFields = default(string), string remoteId = default(string), string requestType = default(string), string status = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xAccountToken' is set
            if (xAccountToken == null)
                throw new Merge.HRISClient.Client.ApiException(400, "Missing required parameter 'xAccountToken' when calling TimeOffApi->TimeOffList");


            Merge.HRISClient.Client.RequestOptions localVarRequestOptions = new Merge.HRISClient.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Merge.HRISClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Merge.HRISClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (approverId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Merge.HRISClient.Client.ClientUtils.ParameterToMultiMap("", "approver_id", approverId));
            }
            if (createdAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Merge.HRISClient.Client.ClientUtils.ParameterToMultiMap("", "created_after", createdAfter));
            }
            if (createdBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(Merge.HRISClient.Client.ClientUtils.ParameterToMultiMap("", "created_before", createdBefore));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Merge.HRISClient.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }
            if (employeeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Merge.HRISClient.Client.ClientUtils.ParameterToMultiMap("", "employee_id", employeeId));
            }
            if (includeDeletedData != null)
            {
                localVarRequestOptions.QueryParameters.Add(Merge.HRISClient.Client.ClientUtils.ParameterToMultiMap("", "include_deleted_data", includeDeletedData));
            }
            if (includeRemoteData != null)
            {
                localVarRequestOptions.QueryParameters.Add(Merge.HRISClient.Client.ClientUtils.ParameterToMultiMap("", "include_remote_data", includeRemoteData));
            }
            if (modifiedAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Merge.HRISClient.Client.ClientUtils.ParameterToMultiMap("", "modified_after", modifiedAfter));
            }
            if (modifiedBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(Merge.HRISClient.Client.ClientUtils.ParameterToMultiMap("", "modified_before", modifiedBefore));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Merge.HRISClient.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (remoteFields != null)
            {
                localVarRequestOptions.QueryParameters.Add(Merge.HRISClient.Client.ClientUtils.ParameterToMultiMap("", "remote_fields", remoteFields));
            }
            if (remoteId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Merge.HRISClient.Client.ClientUtils.ParameterToMultiMap("", "remote_id", remoteId));
            }
            if (requestType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Merge.HRISClient.Client.ClientUtils.ParameterToMultiMap("", "request_type", requestType));
            }
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(Merge.HRISClient.Client.ClientUtils.ParameterToMultiMap("", "status", status));
            }
            localVarRequestOptions.HeaderParameters.Add("X-Account-Token", Merge.HRISClient.Client.ClientUtils.ParameterToString(xAccountToken)); // header parameter

            // authentication (tokenAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<PaginatedTimeOffList>("/time-off", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TimeOffList", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns metadata for &#x60;TimeOff&#x60; POSTs.
        /// </summary>
        /// <exception cref="Merge.HRISClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccountToken">Token identifying the end user.</param>
        /// <returns>MetaResponse</returns>
        public MetaResponse TimeOffMetaPostRetrieve(string xAccountToken)
        {
            Merge.HRISClient.Client.ApiResponse<MetaResponse> localVarResponse = TimeOffMetaPostRetrieveWithHttpInfo(xAccountToken);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns metadata for &#x60;TimeOff&#x60; POSTs.
        /// </summary>
        /// <exception cref="Merge.HRISClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccountToken">Token identifying the end user.</param>
        /// <returns>ApiResponse of MetaResponse</returns>
        public Merge.HRISClient.Client.ApiResponse<MetaResponse> TimeOffMetaPostRetrieveWithHttpInfo(string xAccountToken)
        {
            // verify the required parameter 'xAccountToken' is set
            if (xAccountToken == null)
                throw new Merge.HRISClient.Client.ApiException(400, "Missing required parameter 'xAccountToken' when calling TimeOffApi->TimeOffMetaPostRetrieve");

            Merge.HRISClient.Client.RequestOptions localVarRequestOptions = new Merge.HRISClient.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Merge.HRISClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Merge.HRISClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("X-Account-Token", Merge.HRISClient.Client.ClientUtils.ParameterToString(xAccountToken)); // header parameter

            // authentication (tokenAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<MetaResponse>("/time-off/meta/post", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TimeOffMetaPostRetrieve", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns metadata for &#x60;TimeOff&#x60; POSTs.
        /// </summary>
        /// <exception cref="Merge.HRISClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccountToken">Token identifying the end user.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MetaResponse</returns>
        public async System.Threading.Tasks.Task<MetaResponse> TimeOffMetaPostRetrieveAsync(string xAccountToken, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Merge.HRISClient.Client.ApiResponse<MetaResponse> localVarResponse = await TimeOffMetaPostRetrieveWithHttpInfoAsync(xAccountToken, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns metadata for &#x60;TimeOff&#x60; POSTs.
        /// </summary>
        /// <exception cref="Merge.HRISClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccountToken">Token identifying the end user.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MetaResponse)</returns>
        public async System.Threading.Tasks.Task<Merge.HRISClient.Client.ApiResponse<MetaResponse>> TimeOffMetaPostRetrieveWithHttpInfoAsync(string xAccountToken, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xAccountToken' is set
            if (xAccountToken == null)
                throw new Merge.HRISClient.Client.ApiException(400, "Missing required parameter 'xAccountToken' when calling TimeOffApi->TimeOffMetaPostRetrieve");


            Merge.HRISClient.Client.RequestOptions localVarRequestOptions = new Merge.HRISClient.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Merge.HRISClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Merge.HRISClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("X-Account-Token", Merge.HRISClient.Client.ClientUtils.ParameterToString(xAccountToken)); // header parameter

            // authentication (tokenAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<MetaResponse>("/time-off/meta/post", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TimeOffMetaPostRetrieve", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns a &#x60;TimeOff&#x60; object with the given &#x60;id&#x60;.
        /// </summary>
        /// <exception cref="Merge.HRISClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccountToken">Token identifying the end user.</param>
        /// <param name="id"></param>
        /// <param name="includeRemoteData">Whether to include the original data Merge fetched from the third-party to produce these models. (optional)</param>
        /// <param name="remoteFields">Which fields should be returned in non-normalized form. (optional)</param>
        /// <returns>TimeOff</returns>
        public TimeOff TimeOffRetrieve(string xAccountToken, Guid id, bool? includeRemoteData = default(bool?), string remoteFields = default(string))
        {
            Merge.HRISClient.Client.ApiResponse<TimeOff> localVarResponse = TimeOffRetrieveWithHttpInfo(xAccountToken, id, includeRemoteData, remoteFields);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a &#x60;TimeOff&#x60; object with the given &#x60;id&#x60;.
        /// </summary>
        /// <exception cref="Merge.HRISClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccountToken">Token identifying the end user.</param>
        /// <param name="id"></param>
        /// <param name="includeRemoteData">Whether to include the original data Merge fetched from the third-party to produce these models. (optional)</param>
        /// <param name="remoteFields">Which fields should be returned in non-normalized form. (optional)</param>
        /// <returns>ApiResponse of TimeOff</returns>
        public Merge.HRISClient.Client.ApiResponse<TimeOff> TimeOffRetrieveWithHttpInfo(string xAccountToken, Guid id, bool? includeRemoteData = default(bool?), string remoteFields = default(string))
        {
            // verify the required parameter 'xAccountToken' is set
            if (xAccountToken == null)
                throw new Merge.HRISClient.Client.ApiException(400, "Missing required parameter 'xAccountToken' when calling TimeOffApi->TimeOffRetrieve");

            Merge.HRISClient.Client.RequestOptions localVarRequestOptions = new Merge.HRISClient.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Merge.HRISClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Merge.HRISClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Merge.HRISClient.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (includeRemoteData != null)
            {
                localVarRequestOptions.QueryParameters.Add(Merge.HRISClient.Client.ClientUtils.ParameterToMultiMap("", "include_remote_data", includeRemoteData));
            }
            if (remoteFields != null)
            {
                localVarRequestOptions.QueryParameters.Add(Merge.HRISClient.Client.ClientUtils.ParameterToMultiMap("", "remote_fields", remoteFields));
            }
            localVarRequestOptions.HeaderParameters.Add("X-Account-Token", Merge.HRISClient.Client.ClientUtils.ParameterToString(xAccountToken)); // header parameter

            // authentication (tokenAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<TimeOff>("/time-off/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TimeOffRetrieve", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns a &#x60;TimeOff&#x60; object with the given &#x60;id&#x60;.
        /// </summary>
        /// <exception cref="Merge.HRISClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccountToken">Token identifying the end user.</param>
        /// <param name="id"></param>
        /// <param name="includeRemoteData">Whether to include the original data Merge fetched from the third-party to produce these models. (optional)</param>
        /// <param name="remoteFields">Which fields should be returned in non-normalized form. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TimeOff</returns>
        public async System.Threading.Tasks.Task<TimeOff> TimeOffRetrieveAsync(string xAccountToken, Guid id, bool? includeRemoteData = default(bool?), string remoteFields = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Merge.HRISClient.Client.ApiResponse<TimeOff> localVarResponse = await TimeOffRetrieveWithHttpInfoAsync(xAccountToken, id, includeRemoteData, remoteFields, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a &#x60;TimeOff&#x60; object with the given &#x60;id&#x60;.
        /// </summary>
        /// <exception cref="Merge.HRISClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAccountToken">Token identifying the end user.</param>
        /// <param name="id"></param>
        /// <param name="includeRemoteData">Whether to include the original data Merge fetched from the third-party to produce these models. (optional)</param>
        /// <param name="remoteFields">Which fields should be returned in non-normalized form. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TimeOff)</returns>
        public async System.Threading.Tasks.Task<Merge.HRISClient.Client.ApiResponse<TimeOff>> TimeOffRetrieveWithHttpInfoAsync(string xAccountToken, Guid id, bool? includeRemoteData = default(bool?), string remoteFields = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xAccountToken' is set
            if (xAccountToken == null)
                throw new Merge.HRISClient.Client.ApiException(400, "Missing required parameter 'xAccountToken' when calling TimeOffApi->TimeOffRetrieve");


            Merge.HRISClient.Client.RequestOptions localVarRequestOptions = new Merge.HRISClient.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Merge.HRISClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Merge.HRISClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Merge.HRISClient.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (includeRemoteData != null)
            {
                localVarRequestOptions.QueryParameters.Add(Merge.HRISClient.Client.ClientUtils.ParameterToMultiMap("", "include_remote_data", includeRemoteData));
            }
            if (remoteFields != null)
            {
                localVarRequestOptions.QueryParameters.Add(Merge.HRISClient.Client.ClientUtils.ParameterToMultiMap("", "remote_fields", remoteFields));
            }
            localVarRequestOptions.HeaderParameters.Add("X-Account-Token", Merge.HRISClient.Client.ClientUtils.ParameterToString(xAccountToken)); // header parameter

            // authentication (tokenAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<TimeOff>("/time-off/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TimeOffRetrieve", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
